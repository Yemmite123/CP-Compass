{"ast":null,"code":"import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst getSystemCinfigRequest = () => {\n  return {\n    type: actions.GET_SYSTEM_CONFIG_REQUEST\n  };\n};\n\nconst getSystemCinfigError = message => {\n  return {\n    type: actions.GET_SYSTEM_CONFIG_ERROR,\n    error: message\n  };\n};\n\nconst getSystemCinfigSuccess = data => {\n  return {\n    type: actions.GET_SYSTEM_CONFIG_SUCCESS,\n    data\n  };\n};\n\nexport const getSystemCinfig = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(getSystemCinfigRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/users/configurations`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if ([200, 201].includes(response.status)) {\n        dispatch(getSystemCinfigSuccess(response.data.data));\n      }\n    }).catch(({\n      response\n    }) => {\n      response && response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 403].includes(response.status)) {\n        return dispatch(getSystemCinfigError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getSystemCinfigError('Oops! We did something wrong.'));\n      }\n\n      dispatch(getSystemCinfigError('Oops! We did something wrong.'));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/config/actions.js"],"names":["axios","CONFIG","actions","logout","updateUser","showAlert","getSystemCinfigRequest","type","GET_SYSTEM_CONFIG_REQUEST","getSystemCinfigError","message","GET_SYSTEM_CONFIG_ERROR","error","getSystemCinfigSuccess","data","GET_SYSTEM_CONFIG_SUCCESS","getSystemCinfig","payload","history","dispatch","getState","token","user","get","BASE_URL","headers","Authorization","then","response","authorization","includes","status","catch","setTimeout"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst getSystemCinfigRequest = () => {\n  return {\n    type: actions.GET_SYSTEM_CONFIG_REQUEST,\n  }\n}\n\nconst getSystemCinfigError = (message) => {\n  return {\n    type: actions.GET_SYSTEM_CONFIG_ERROR,\n    error: message,\n  }\n}\n\nconst getSystemCinfigSuccess = (data) => {\n  return {\n    type: actions.GET_SYSTEM_CONFIG_SUCCESS,\n    data,\n  }\n}\n\nexport const getSystemCinfig = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(getSystemCinfigRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/users/configurations`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n    .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n      if ([200, 201].includes(response.status)) {\n        dispatch(getSystemCinfigSuccess(response.data.data));\n      }\n    })\n    .catch(({ response }) => {\n         response && response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n      if (response && [400, 404, 403].includes(response.status)) {\n        return dispatch(getSystemCinfigError(response.data.error ? response.data.error : response.data.message));\n      }\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n        return setTimeout(() => dispatch(logout()), 2000) \n      }\n      if (response && response.status >= 500) {\n        return dispatch(getSystemCinfigError('Oops! We did something wrong.'));\n      }\n      dispatch(getSystemCinfigError('Oops! We did something wrong.'));\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}