{"ast":null,"code":"import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR\n  };\n};\n\nconst clearData = () => {\n  return {\n    type: actions.CLEAR_DATA\n  };\n};\n\nconst confirmPinRequest = () => {\n  return {\n    type: actions.CONFIRM_PIN_REQUEST\n  };\n};\n\nconst confirmPinError = message => {\n  return {\n    type: actions.CONFIRM_PIN_ERROR,\n    error: message\n  };\n};\n\nconst confirmPinSuccess = data => {\n  return {\n    type: actions.CONFIRM_PIN_SUCCESS,\n    data\n  };\n};\n\nexport const confirmPin = payload => {\n  return (dispatch, getState) => {\n    dispatch(confirmPinRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise(resolve => {\n      axios.post(`${CONFIG.BASE_URL}/profile/pin/confirm`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if ([200, 201].includes(response.status)) {\n          dispatch(confirmPinSuccess(response.data));\n          resolve(response.data);\n        }\n      }).catch(error => {\n        error.response && dispatch(updateUser({\n          token: error.response.headers.authorization\n        }));\n\n        if (error.response && [400, 404, 403].includes(error.response.status)) {\n          dispatch(confirmPinError(error.response.data.error ? error.response.data.error : error.response.data.message));\n          return setTimeout(() => dispatch(clearError()), 5000);\n        }\n\n        if (error.response && [401].includes(error.response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (error.response && error.response.status >= 500) {\n          dispatch(confirmPinError('Oops! We did something wrong.'));\n          return setTimeout(() => dispatch(clearError()), 5000);\n        }\n\n        dispatch(confirmPinError('Oops! We did something wrong.'));\n        return setTimeout(() => dispatch(clearError()), 5000);\n      });\n    });\n  };\n}; //CHANGE PASSWORD \n\nconst changePasswordRequest = () => {\n  return {\n    type: actions.CHANGE_PASSWORD_REQUEST\n  };\n};\n\nconst changePasswordError = message => {\n  return {\n    type: actions.CHANGE_PASSWORD_ERROR,\n    error: message\n  };\n};\n\nconst changePasswordSuccess = data => {\n  return {\n    type: actions.CHANGE_PASSWORD_SUCCESS,\n    data\n  };\n};\n\nexport const changePassword = payload => {\n  return (dispatch, getState) => {\n    dispatch(changePasswordRequest());\n    const {\n      token\n    } = getState().user;\n    axios.post(`${CONFIG.BASE_URL}/auth/password/change`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers;\n\n      ((_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if ([200, 201].includes(response.status)) {\n        dispatch(changePasswordSuccess(response.data));\n        setTimeout(() => dispatch(clearData()), 3000);\n      }\n    }).catch(error => {\n      error.response && dispatch(updateUser({\n        token: error.response.headers.authorization\n      }));\n\n      if (error.response && [400, 404, 403].includes(error.response.status)) {\n        dispatch(changePasswordError(error.response.data.error ? error.response.data.error : error.response.data.message));\n        return setTimeout(() => dispatch(clearError()), 5000);\n      }\n\n      if (error.response && [401].includes(error.response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (error.response && error.response.status >= 500) {\n        dispatch(changePasswordError('Oops! We did something wrong.'));\n        return setTimeout(() => dispatch(clearError()), 5000);\n      }\n\n      dispatch(changePasswordError('Oops! We did something wrong.'));\n      return setTimeout(() => dispatch(clearError()), 5000);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/security/actions.js"],"names":["axios","CONFIG","actions","logout","updateUser","showAlert","clearError","type","CLEAR_ERROR","clearData","CLEAR_DATA","confirmPinRequest","CONFIRM_PIN_REQUEST","confirmPinError","message","CONFIRM_PIN_ERROR","error","confirmPinSuccess","data","CONFIRM_PIN_SUCCESS","confirmPin","payload","dispatch","getState","token","user","Promise","resolve","post","BASE_URL","headers","Authorization","then","response","authorization","includes","status","catch","setTimeout","changePasswordRequest","CHANGE_PASSWORD_REQUEST","changePasswordError","CHANGE_PASSWORD_ERROR","changePasswordSuccess","CHANGE_PASSWORD_SUCCESS","changePassword"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR,\n  }\n}\n\nconst clearData = () => {\n  return {\n    type: actions.CLEAR_DATA\n  }\n}\n\nconst confirmPinRequest = () => {\n  return {\n    type: actions.CONFIRM_PIN_REQUEST,\n  }\n}\n\nconst confirmPinError = (message) => {\n  return {\n    type: actions.CONFIRM_PIN_ERROR,\n    error: message,\n  }\n}\n\nconst confirmPinSuccess = (data) => {\n  return {\n    type: actions.CONFIRM_PIN_SUCCESS,\n    data,\n  }\n}\n\nexport const confirmPin = (payload) => {\n  return (dispatch, getState) => {\n    dispatch(confirmPinRequest());\n\n    const { token } = getState().user;\n\n    return new Promise((resolve) => {\n      axios.post(`${CONFIG.BASE_URL}/profile/pin/confirm`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if ([200, 201].includes(response.status)) {\n            dispatch(confirmPinSuccess(response.data));\n            resolve(response.data)\n          }\n        })\n        .catch((error) => {\n          error.response && dispatch(updateUser({\n            token: error.response.headers.authorization\n          }))\n          if (error.response && [400, 404, 403].includes(error.response.status)) {\n            dispatch(confirmPinError(error.response.data.error ? error.response.data.error : error.response.data.message));\n            return setTimeout(() => dispatch(clearError()), 5000)\n          }\n          if (error.response && [401].includes(error.response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (error.response && error.response.status >= 500) {\n            dispatch(confirmPinError('Oops! We did something wrong.'));\n            return setTimeout(() => dispatch(clearError()), 5000)\n          }\n          dispatch(confirmPinError('Oops! We did something wrong.'));\n          return setTimeout(() => dispatch(clearError()), 5000)\n        })\n    })\n  }\n}\n\n//CHANGE PASSWORD \nconst changePasswordRequest = () => {\n  return {\n    type: actions.CHANGE_PASSWORD_REQUEST,\n  }\n}\n\nconst changePasswordError = (message) => {\n  return {\n    type: actions.CHANGE_PASSWORD_ERROR,\n    error: message,\n  }\n}\n\nconst changePasswordSuccess = (data) => {\n  return {\n    type: actions.CHANGE_PASSWORD_SUCCESS,\n    data,\n  }\n}\n\nexport const changePassword = (payload) => {\n  return (dispatch, getState) => {\n    dispatch(changePasswordRequest());\n\n    const { token } = getState().user;\n\n    axios.post(`${CONFIG.BASE_URL}/auth/password/change`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if ([200, 201].includes(response.status)) {\n          dispatch(changePasswordSuccess(response.data));\n          setTimeout(() => dispatch(clearData()), 3000)\n        }\n      })\n      .catch((error) => {\n        error.response && dispatch(updateUser({\n          token: error.response.headers.authorization\n        }))\n        if (error.response && [400, 404, 403].includes(error.response.status)) {\n          dispatch(changePasswordError(error.response.data.error ? error.response.data.error : error.response.data.message));\n          return setTimeout(() => dispatch(clearError()), 5000)\n        }\n        if (error.response && [401].includes(error.response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (error.response && error.response.status >= 500) {\n          dispatch(changePasswordError('Oops! We did something wrong.'));\n          return setTimeout(() => dispatch(clearError()), 5000)\n        }\n        dispatch(changePasswordError('Oops! We did something wrong.'));\n        return setTimeout(() => dispatch(clearError()), 5000)\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}