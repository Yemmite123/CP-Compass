{"ast":null,"code":"import { createSelector } from \"reselect\";\n\nconst getUiLoadingStates = state => state.ui.loading;\n\nconst getUiErrorStates = state => state.ui.errors;\n\nconst getUiAlertStates = state => state.ui.alerts;\n\nconst getUiUpdateStates = state => state.ui.updating;\n\nconst actionSelector = (_, action) => {\n  const matches = /(.*)_(REQUEST|ERROR|SUCCESS|ALERT)/.exec(action);\n\n  if (!matches) {\n    return action;\n  }\n\n  const prefix = matches[1];\n  return prefix;\n};\n\nconst actionListSelector = (_, actions) => {\n  let actionList = [];\n  actions.forEach(action => {\n    const prefix = actionSelector(_, action);\n    actionList.push(prefix);\n  });\n  return actionList;\n};\n\nexport const getActionLoadingState = createSelector([getUiLoadingStates, actionSelector], (loadingStates, action) => {\n  return loadingStates[action];\n});\nexport const getActionErrorState = createSelector([getUiErrorStates, actionSelector], (errorStates, action) => {\n  return errorStates[action];\n});\nexport const getActionUpdateState = createSelector([getUiUpdateStates, actionSelector], (updatingStates, action) => {\n  return updatingStates[action];\n});\nexport const getActionsErrorStatesList = createSelector([getUiErrorStates, actionListSelector], (errorStates, actions) => {\n  let errors = [];\n  actions.forEach(action => {\n    errors.push(errorStates[action]);\n  });\n  return errors;\n});\nexport const getActionAlertState = createSelector([getUiAlertStates, actionSelector], (alertStates, action) => {\n  return alertStates[action];\n});","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/selectors/index.js"],"names":["createSelector","getUiLoadingStates","state","ui","loading","getUiErrorStates","errors","getUiAlertStates","alerts","getUiUpdateStates","updating","actionSelector","_","action","matches","exec","prefix","actionListSelector","actions","actionList","forEach","push","getActionLoadingState","loadingStates","getActionErrorState","errorStates","getActionUpdateState","updatingStates","getActionsErrorStatesList","getActionAlertState","alertStates"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,MAAMC,kBAAkB,GAAGC,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASC,OAA7C;;AACA,MAAMC,gBAAgB,GAAGH,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASG,MAA3C;;AACA,MAAMC,gBAAgB,GAAGL,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASK,MAA3C;;AACA,MAAMC,iBAAiB,GAAGP,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASO,QAA5C;;AAEA,MAAMC,cAAc,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAClC,QAAMC,OAAO,GAAG,qCAAqCC,IAArC,CAA0CF,MAA1C,CAAhB;;AAEA,MAAG,CAACC,OAAJ,EAAa;AACT,WAAOD,MAAP;AACH;;AAED,QAAMG,MAAM,GAAGF,OAAO,CAAC,CAAD,CAAtB;AACA,SAAOE,MAAP;AACH,CATD;;AAWA,MAAMC,kBAAkB,GAAG,CAACL,CAAD,EAAIM,OAAJ,KAAgB;AACvC,MAAIC,UAAU,GAAG,EAAjB;AAEAD,EAAAA,OAAO,CAACE,OAAR,CAAgBP,MAAM,IAAI;AACtB,UAAMG,MAAM,GAAGL,cAAc,CAACC,CAAD,EAAIC,MAAJ,CAA7B;AACAM,IAAAA,UAAU,CAACE,IAAX,CAAgBL,MAAhB;AACH,GAHD;AAKA,SAAOG,UAAP;AACH,CATD;;AAWA,OAAO,MAAMG,qBAAqB,GAAGtB,cAAc,CAC/C,CAACC,kBAAD,EAAqBU,cAArB,CAD+C,EAE/C,CAACY,aAAD,EAAgBV,MAAhB,KAA2B;AACvB,SAAOU,aAAa,CAACV,MAAD,CAApB;AACH,CAJ8C,CAA5C;AAOP,OAAO,MAAMW,mBAAmB,GAAGxB,cAAc,CAC7C,CAACK,gBAAD,EAAmBM,cAAnB,CAD6C,EAE7C,CAACc,WAAD,EAAcZ,MAAd,KAAyB;AACrB,SAAOY,WAAW,CAACZ,MAAD,CAAlB;AACH,CAJ4C,CAA1C;AAOP,OAAO,MAAMa,oBAAoB,GAAG1B,cAAc,CAC9C,CAACS,iBAAD,EAAoBE,cAApB,CAD8C,EAE9C,CAACgB,cAAD,EAAiBd,MAAjB,KAA4B;AACxB,SAAOc,cAAc,CAACd,MAAD,CAArB;AACH,CAJ6C,CAA3C;AAOP,OAAO,MAAMe,yBAAyB,GAAG5B,cAAc,CACnD,CAACK,gBAAD,EAAmBY,kBAAnB,CADmD,EAEnD,CAACQ,WAAD,EAAcP,OAAd,KAA0B;AACtB,MAAIZ,MAAM,GAAG,EAAb;AAEAY,EAAAA,OAAO,CAACE,OAAR,CAAgBP,MAAM,IAAI;AACtBP,IAAAA,MAAM,CAACe,IAAP,CAAYI,WAAW,CAACZ,MAAD,CAAvB;AACH,GAFD;AAIA,SAAOP,MAAP;AACH,CAVkD,CAAhD;AAaP,OAAO,MAAMuB,mBAAmB,GAAG7B,cAAc,CAC7C,CAACO,gBAAD,EAAmBI,cAAnB,CAD6C,EAE7C,CAACmB,WAAD,EAAcjB,MAAd,KAAyB;AACrB,SAAOiB,WAAW,CAACjB,MAAD,CAAlB;AACH,CAJ4C,CAA1C","sourcesContent":["import { createSelector } from \"reselect\";\n\nconst getUiLoadingStates = state => state.ui.loading;\nconst getUiErrorStates = state => state.ui.errors;\nconst getUiAlertStates = state => state.ui.alerts;\nconst getUiUpdateStates = state => state.ui.updating;\n\nconst actionSelector = (_, action) => {\n    const matches = /(.*)_(REQUEST|ERROR|SUCCESS|ALERT)/.exec(action);\n\n    if(!matches) {\n        return action;\n    }\n\n    const prefix = matches[1];\n    return prefix;\n}\n\nconst actionListSelector = (_, actions) => {\n    let actionList = [];\n\n    actions.forEach(action => {\n        const prefix = actionSelector(_, action);\n        actionList.push(prefix);\n    })\n\n    return actionList;\n}\n\nexport const getActionLoadingState = createSelector(\n    [getUiLoadingStates, actionSelector],\n    (loadingStates, action) => {\n        return loadingStates[action]\n    }\n);\n\nexport const getActionErrorState = createSelector(\n    [getUiErrorStates, actionSelector],\n    (errorStates, action) => {\n        return errorStates[action]\n    }\n)\n\nexport const getActionUpdateState = createSelector(\n    [getUiUpdateStates, actionSelector],\n    (updatingStates, action) => {\n        return updatingStates[action]\n    }\n)\n\nexport const getActionsErrorStatesList = createSelector(\n    [getUiErrorStates, actionListSelector],\n    (errorStates, actions) => {\n        let errors = [];\n\n        actions.forEach(action => {\n            errors.push(errorStates[action]);\n        })\n\n        return errors;\n    }\n)\n\nexport const getActionAlertState = createSelector(\n    [getUiAlertStates, actionSelector],\n    (alertStates, action) => {\n        return alertStates[action]\n    }\n)"]},"metadata":{},"sourceType":"module"}