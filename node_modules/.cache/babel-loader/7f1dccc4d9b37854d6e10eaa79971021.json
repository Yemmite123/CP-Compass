{"ast":null,"code":"import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions'; //get latest posts\n\nconst getRecentPostsRequest = () => {\n  return {\n    type: actions.GET_RECENT_POSTS_REQUEST\n  };\n};\n\nconst getRecentPostsError = message => {\n  return {\n    type: actions.GET_RECENT_POSTS_ERROR,\n    error: message\n  };\n};\n\nconst getRecentPostsSuccess = data => {\n  return {\n    type: actions.GET_RECENT_POSTS_SUCCESS,\n    data\n  };\n};\n\nexport const getRecentPosts = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getRecentPostsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/blog/posts/recent?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers;\n\n      ((_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getRecentPostsSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(getRecentPostsError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getRecentPostsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getRecentPostsError('Oops! We did something wrong.'));\n    });\n  };\n};\n\nconst getTrendingPostsRequest = () => {\n  return {\n    type: actions.GET_TRENDING_POSTS_REQUEST\n  };\n};\n\nconst getTrendingPostsError = message => {\n  return {\n    type: actions.GET_TRENDING_POSTS_ERROR,\n    error: message\n  };\n};\n\nconst getTrendingPostsSuccess = data => {\n  return {\n    type: actions.GET_TRENDING_POSTS_SUCCESS,\n    data\n  };\n};\n\nexport const getTrendingPosts = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getTrendingPostsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/blog/posts/trends?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers2;\n\n      ((_response$headers2 = response.headers) === null || _response$headers2 === void 0 ? void 0 : _response$headers2.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getTrendingPostsSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(getTrendingPostsError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getTrendingPostsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getTrendingPostsError('Oops! We did something wrong.'));\n    });\n  };\n}; //get latest posts\n\nconst getLatestPostsRequest = () => {\n  return {\n    type: actions.GET_LATEST_POSTS_REQUEST\n  };\n};\n\nconst getLatestPostsError = message => {\n  return {\n    type: actions.GET_LATEST_POSTS_ERROR,\n    error: message\n  };\n};\n\nconst getLatestPostsSuccess = data => {\n  return {\n    type: actions.GET_LATEST_POSTS_SUCCESS,\n    data\n  };\n};\n\nexport const getLatestPosts = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getLatestPostsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/blog/posts?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers3;\n\n      ((_response$headers3 = response.headers) === null || _response$headers3 === void 0 ? void 0 : _response$headers3.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getLatestPostsSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(getLatestPostsError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getLatestPostsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getLatestPostsError('Oops! We did something wrong.'));\n    });\n  };\n}; //get single post\n\nconst getSinglePostRequest = () => {\n  return {\n    type: actions.GET_SINGLE_POST_REQUEST\n  };\n};\n\nconst getSinglePostError = message => {\n  return {\n    type: actions.GET_SINGLE_POST_ERROR,\n    error: message\n  };\n};\n\nconst getSinglePostSuccess = data => {\n  return {\n    type: actions.GET_SINGLE_POST_SUCCESS,\n    data\n  };\n};\n\nexport const getSinglePost = slug => {\n  return (dispatch, getState) => {\n    dispatch(getSinglePostRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.get(`${CONFIG.BASE_URL}/blog/posts/${slug}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$data;\n\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(getSinglePostSuccess(response.data));\n        resolve((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getSinglePostError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(getSinglePostError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(getSinglePostError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //get single post comments\n\nconst getCommentsRequest = () => {\n  return {\n    type: actions.GET_COMMENTS_REQUEST\n  };\n};\n\nconst getCommentsError = message => {\n  return {\n    type: actions.GET_COMMENTS_ERROR,\n    error: message\n  };\n};\n\nconst getCommentsSuccess = data => {\n  return {\n    type: actions.GET_COMMENTS_SUCCESS,\n    data\n  };\n};\n\nexport const getComments = (slug, page, limit) => {\n  return (dispatch, getState) => {\n    dispatch(getCommentsRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.get(`${CONFIG.BASE_URL}/blog/posts/${slug}/comments?page=${page}&limit=${limit}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(getCommentsSuccess(response.data));\n        resolve(response.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getCommentsError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(getCommentsError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(getCommentsError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //post single comments\n\nconst postCommentRequest = () => {\n  return {\n    type: actions.POST_COMMENT_REQUEST\n  };\n};\n\nconst postCommentError = message => {\n  return {\n    type: actions.POST_COMMENT_ERROR,\n    error: message\n  };\n};\n\nconst postCommentSuccess = data => {\n  return {\n    type: actions.POST_COMMENT_SUCCESS,\n    data\n  };\n};\n\nexport const postComment = (slug, payload) => {\n  return (dispatch, getState) => {\n    dispatch(postCommentRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.post(`${CONFIG.BASE_URL}/blog/posts/${slug}/comments`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$data2;\n\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(postCommentSuccess(response.data));\n        dispatch(showAlert({\n          type: 'success',\n          message: 'Comment posted successfully'\n        }));\n        resolve((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422].includes(response.status)) {\n          return dispatch(postCommentError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && [403].includes(response.status)) {\n          return dispatch(showAlert({\n            type: 'error',\n            message: response.data.message\n          }));\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(postCommentError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(postCommentError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //reply single comments\n\nconst replyCommentRequest = () => {\n  return {\n    type: actions.REPLY_COMMENT_REQUEST\n  };\n};\n\nconst replyCommentError = message => {\n  return {\n    type: actions.REPLY_COMMENT_ERROR,\n    error: message\n  };\n};\n\nconst replyCommentSuccess = data => {\n  return {\n    type: actions.REPLY_COMMENT_SUCCESS,\n    data\n  };\n};\n\nexport const replyComment = (slug, commentId, payload) => {\n  return (dispatch, getState) => {\n    dispatch(replyCommentRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.post(`${CONFIG.BASE_URL}/blog/posts/${slug}/comments/${commentId}/reply`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$data3;\n\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(replyCommentSuccess(response.data));\n        dispatch(showAlert({\n          type: 'success',\n          message: 'Reply sent successfully'\n        }));\n        resolve((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422].includes(response.status)) {\n          return dispatch(replyCommentError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && [403].includes(response.status)) {\n          return dispatch(showAlert({\n            type: 'error',\n            message: response.data.message\n          }));\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(replyCommentError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(replyCommentError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //LIKE single comments\n\nconst likeCommentRequest = () => {\n  return {\n    type: actions.LIKE_COMMENT_REQUEST\n  };\n};\n\nconst likeCommentError = message => {\n  return {\n    type: actions.LIKE_COMMENT_ERROR,\n    error: message\n  };\n};\n\nconst likeCommentSuccess = data => {\n  return {\n    type: actions.LIKE_COMMENT_SUCCESS,\n    data\n  };\n};\n\nexport const likeComment = (commentId, payload) => {\n  return (dispatch, getState) => {\n    dispatch(likeCommentRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.post(`${CONFIG.BASE_URL}/blog/posts/comments/${commentId}/like`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$data4, _response$data5;\n\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(likeCommentSuccess(response.data));\n        dispatch(showAlert({\n          type: 'success',\n          message: (_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.message\n        }));\n        resolve((_response$data5 = response.data) === null || _response$data5 === void 0 ? void 0 : _response$data5.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422].includes(response.status)) {\n          return dispatch(likeCommentError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && [403].includes(response.status)) {\n          return dispatch(showAlert({\n            type: 'error',\n            message: response.data.message\n          }));\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(likeCommentError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(likeCommentError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //GET CATEGORY POSTS\n\nconst getCategoryPostsRequest = () => {\n  return {\n    type: actions.GET_CATEGORY_POSTS_REQUEST\n  };\n};\n\nconst getCategoryPostsError = message => {\n  return {\n    type: actions.GET_CATEGORY_POSTS_ERROR,\n    error: message\n  };\n};\n\nconst getCategoryPostsSuccess = data => {\n  return {\n    type: actions.GET_CATEGORY_POSTS_SUCCESS,\n    data\n  };\n};\n\nexport const getCategoryPosts = (slug, page, limit) => {\n  return (dispatch, getState) => {\n    dispatch(getCategoryPostsRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.get(`${CONFIG.BASE_URL}/blog/category/${slug}?page=${page}&limit=${limit}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$data6;\n\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(getCategoryPostsSuccess(response.data));\n        resolve((_response$data6 = response.data) === null || _response$data6 === void 0 ? void 0 : _response$data6.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422].includes(response.status)) {\n          return dispatch(getCategoryPostsError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && [403].includes(response.status)) {\n          return dispatch(showAlert({\n            type: 'error',\n            message: response.data.message\n          }));\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(getCategoryPostsError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(getCategoryPostsError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //FILTER BLOG POSTS\n\nconst filterPostsRequest = () => {\n  return {\n    type: actions.FILTER_POSTS_REQUEST\n  };\n};\n\nconst filterPostsError = message => {\n  return {\n    type: actions.FILTER_POSTS_ERROR,\n    error: message\n  };\n};\n\nconst filterPostsSuccess = data => {\n  return {\n    type: actions.FILTER_POSTS_SUCCESS,\n    data\n  };\n};\n\nexport const filterPosts = (search, page, limit) => {\n  return (dispatch, getState) => {\n    dispatch(filterPostsRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.get(`${CONFIG.BASE_URL}/blog/posts/filter?search=${search}&page=${page}&limit=${limit}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$data7;\n\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(filterPostsSuccess(response.data));\n        resolve((_response$data7 = response.data) === null || _response$data7 === void 0 ? void 0 : _response$data7.data);\n      }).catch(({\n        response\n      }) => {\n        reject(response);\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(filterPostsError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(filterPostsError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(filterPostsError('Oops! We did something wrong.'));\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/blog/actions.js"],"names":["axios","CONFIG","actions","logout","updateUser","showAlert","getRecentPostsRequest","type","GET_RECENT_POSTS_REQUEST","getRecentPostsError","message","GET_RECENT_POSTS_ERROR","error","getRecentPostsSuccess","data","GET_RECENT_POSTS_SUCCESS","getRecentPosts","limit","page","dispatch","getState","token","user","get","BASE_URL","headers","Authorization","then","response","authorization","catch","includes","status","setTimeout","getTrendingPostsRequest","GET_TRENDING_POSTS_REQUEST","getTrendingPostsError","GET_TRENDING_POSTS_ERROR","getTrendingPostsSuccess","GET_TRENDING_POSTS_SUCCESS","getTrendingPosts","getLatestPostsRequest","GET_LATEST_POSTS_REQUEST","getLatestPostsError","GET_LATEST_POSTS_ERROR","getLatestPostsSuccess","GET_LATEST_POSTS_SUCCESS","getLatestPosts","getSinglePostRequest","GET_SINGLE_POST_REQUEST","getSinglePostError","GET_SINGLE_POST_ERROR","getSinglePostSuccess","GET_SINGLE_POST_SUCCESS","getSinglePost","slug","Promise","resolve","reject","getCommentsRequest","GET_COMMENTS_REQUEST","getCommentsError","GET_COMMENTS_ERROR","getCommentsSuccess","GET_COMMENTS_SUCCESS","getComments","postCommentRequest","POST_COMMENT_REQUEST","postCommentError","POST_COMMENT_ERROR","postCommentSuccess","POST_COMMENT_SUCCESS","postComment","payload","post","replyCommentRequest","REPLY_COMMENT_REQUEST","replyCommentError","REPLY_COMMENT_ERROR","replyCommentSuccess","REPLY_COMMENT_SUCCESS","replyComment","commentId","likeCommentRequest","LIKE_COMMENT_REQUEST","likeCommentError","LIKE_COMMENT_ERROR","likeCommentSuccess","LIKE_COMMENT_SUCCESS","likeComment","getCategoryPostsRequest","GET_CATEGORY_POSTS_REQUEST","getCategoryPostsError","GET_CATEGORY_POSTS_ERROR","getCategoryPostsSuccess","GET_CATEGORY_POSTS_SUCCESS","getCategoryPosts","filterPostsRequest","FILTER_POSTS_REQUEST","filterPostsError","FILTER_POSTS_ERROR","filterPostsSuccess","FILTER_POSTS_SUCCESS","filterPosts","search"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\n\n//get latest posts\nconst getRecentPostsRequest = () => {\n  return {\n    type: actions.GET_RECENT_POSTS_REQUEST,\n  }\n}\n\nconst getRecentPostsError = (message) => {\n  return {\n    type: actions.GET_RECENT_POSTS_ERROR,\n    error: message,\n  }\n}\n\nconst getRecentPostsSuccess = (data) => {\n  return {\n    type: actions.GET_RECENT_POSTS_SUCCESS,\n    data,\n  }\n}\n\nexport const getRecentPosts = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getRecentPostsRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/blog/posts/recent?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getRecentPostsSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getRecentPostsError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getRecentPostsError('Oops! We did something wrong.'));\n        }\n        return dispatch(getRecentPostsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n\nconst getTrendingPostsRequest = () => {\n  return {\n    type: actions.GET_TRENDING_POSTS_REQUEST,\n  }\n}\n\nconst getTrendingPostsError = (message) => {\n  return {\n    type: actions.GET_TRENDING_POSTS_ERROR,\n    error: message,\n  }\n}\n\nconst getTrendingPostsSuccess = (data) => {\n  return {\n    type: actions.GET_TRENDING_POSTS_SUCCESS,\n    data,\n  }\n}\n\nexport const getTrendingPosts = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getTrendingPostsRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/blog/posts/trends?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getTrendingPostsSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getTrendingPostsError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getTrendingPostsError('Oops! We did something wrong.'));\n        }\n        return dispatch(getTrendingPostsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//get latest posts\nconst getLatestPostsRequest = () => {\n  return {\n    type: actions.GET_LATEST_POSTS_REQUEST,\n  }\n}\n\nconst getLatestPostsError = (message) => {\n  return {\n    type: actions.GET_LATEST_POSTS_ERROR,\n    error: message,\n  }\n}\n\nconst getLatestPostsSuccess = (data) => {\n  return {\n    type: actions.GET_LATEST_POSTS_SUCCESS,\n    data,\n  }\n}\n\nexport const getLatestPosts = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getLatestPostsRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/blog/posts?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getLatestPostsSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getLatestPostsError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getLatestPostsError('Oops! We did something wrong.'));\n        }\n        return dispatch(getLatestPostsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//get single post\nconst getSinglePostRequest = () => {\n  return {\n    type: actions.GET_SINGLE_POST_REQUEST,\n  }\n}\n\nconst getSinglePostError = (message) => {\n  return {\n    type: actions.GET_SINGLE_POST_ERROR,\n    error: message,\n  }\n}\n\nconst getSinglePostSuccess = (data) => {\n  return {\n    type: actions.GET_SINGLE_POST_SUCCESS,\n    data,\n  }\n}\n\nexport const getSinglePost = (slug) => {\n  return (dispatch, getState) => {\n    dispatch(getSinglePostRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.get(`${CONFIG.BASE_URL}/blog/posts/${slug}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(getSinglePostSuccess(response.data));\n          resolve(response.data?.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n          response && response?.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if (response && [400, 404, 422, 403].includes(response.status)) {\n            return dispatch(getSinglePostError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && response.status >= 500) {\n            return dispatch(getSinglePostError('Oops! We did something wrong.'));\n          }\n          return dispatch(getSinglePostError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n\n//get single post comments\nconst getCommentsRequest = () => {\n  return {\n    type: actions.GET_COMMENTS_REQUEST,\n  }\n}\n\nconst getCommentsError = (message) => {\n  return {\n    type: actions.GET_COMMENTS_ERROR,\n    error: message,\n  }\n}\n\nconst getCommentsSuccess = (data) => {\n  return {\n    type: actions.GET_COMMENTS_SUCCESS,\n    data,\n  }\n}\n\nexport const getComments = (slug, page, limit) => {\n  return (dispatch, getState) => {\n    dispatch(getCommentsRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.get(`${CONFIG.BASE_URL}/blog/posts/${slug}/comments?page=${page}&limit=${limit}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(getCommentsSuccess(response.data));\n          resolve(response.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n          response && response?.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if (response && [400, 404, 422, 403].includes(response.status)) {\n            return dispatch(getCommentsError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && response.status >= 500) {\n            return dispatch(getCommentsError('Oops! We did something wrong.'));\n          }\n          return dispatch(getCommentsError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n//post single comments\nconst postCommentRequest = () => {\n  return {\n    type: actions.POST_COMMENT_REQUEST,\n  }\n}\n\nconst postCommentError = (message) => {\n  return {\n    type: actions.POST_COMMENT_ERROR,\n    error: message,\n  }\n}\n\nconst postCommentSuccess = (data) => {\n  return {\n    type: actions.POST_COMMENT_SUCCESS,\n    data,\n  }\n}\n\nexport const postComment = (slug, payload) => {\n  return (dispatch, getState) => {\n    dispatch(postCommentRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.post(`${CONFIG.BASE_URL}/blog/posts/${slug}/comments`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(postCommentSuccess(response.data));\n          dispatch(showAlert({ type: 'success', message: 'Comment posted successfully' }))\n          resolve(response.data?.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n          response && response?.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if (response && [400, 404, 422].includes(response.status)) {\n            return dispatch(postCommentError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && [403].includes(response.status)) {\n            return dispatch(showAlert({ type: 'error', message: response.data.message }))\n          }\n          if (response && response.status >= 500) {\n            return dispatch(postCommentError('Oops! We did something wrong.'));\n          }\n          return dispatch(postCommentError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n//reply single comments\nconst replyCommentRequest = () => {\n  return {\n    type: actions.REPLY_COMMENT_REQUEST,\n  }\n}\n\nconst replyCommentError = (message) => {\n  return {\n    type: actions.REPLY_COMMENT_ERROR,\n    error: message,\n  }\n}\n\nconst replyCommentSuccess = (data) => {\n  return {\n    type: actions.REPLY_COMMENT_SUCCESS,\n    data,\n  }\n}\n\nexport const replyComment = (slug, commentId, payload) => {\n  return (dispatch, getState) => {\n    dispatch(replyCommentRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.post(`${CONFIG.BASE_URL}/blog/posts/${slug}/comments/${commentId}/reply`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(replyCommentSuccess(response.data));\n          dispatch(showAlert({ type: 'success', message: 'Reply sent successfully' }))\n          resolve(response.data?.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n          response && response?.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if (response && [400, 404, 422].includes(response.status)) {\n            return dispatch(replyCommentError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && [403].includes(response.status)) {\n            return dispatch(showAlert({ type: 'error', message: response.data.message }))\n          }\n          if (response && response.status >= 500) {\n            return dispatch(replyCommentError('Oops! We did something wrong.'));\n          }\n          return dispatch(replyCommentError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n//LIKE single comments\nconst likeCommentRequest = () => {\n  return {\n    type: actions.LIKE_COMMENT_REQUEST,\n  }\n}\n\nconst likeCommentError = (message) => {\n  return {\n    type: actions.LIKE_COMMENT_ERROR,\n    error: message,\n  }\n}\n\nconst likeCommentSuccess = (data) => {\n  return {\n    type: actions.LIKE_COMMENT_SUCCESS,\n    data,\n  }\n}\n\nexport const likeComment = (commentId, payload) => {\n  return (dispatch, getState) => {\n    dispatch(likeCommentRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.post(`${CONFIG.BASE_URL}/blog/posts/comments/${commentId}/like`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(likeCommentSuccess(response.data));\n          dispatch(showAlert({ type: 'success', message: response.data?.message }))\n          resolve(response.data?.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n          if (response && [400, 404, 422].includes(response.status)) {\n            return dispatch(likeCommentError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && [403].includes(response.status)) {\n            return dispatch(showAlert({ type: 'error', message: response.data.message }))\n          }\n          if (response && response.status >= 500) {\n            return dispatch(likeCommentError('Oops! We did something wrong.'));\n          }\n          return dispatch(likeCommentError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n//GET CATEGORY POSTS\nconst getCategoryPostsRequest = () => {\n  return {\n    type: actions.GET_CATEGORY_POSTS_REQUEST,\n  }\n}\n\nconst getCategoryPostsError = (message) => {\n  return {\n    type: actions.GET_CATEGORY_POSTS_ERROR,\n    error: message,\n  }\n}\n\nconst getCategoryPostsSuccess = (data) => {\n  return {\n    type: actions.GET_CATEGORY_POSTS_SUCCESS,\n    data,\n  }\n}\n\nexport const getCategoryPosts = (slug, page, limit) => {\n  return (dispatch, getState) => {\n    dispatch(getCategoryPostsRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.get(`${CONFIG.BASE_URL}/blog/category/${slug}?page=${page}&limit=${limit}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(getCategoryPostsSuccess(response.data));\n          resolve(response.data?.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n          if (response && [400, 404, 422].includes(response.status)) {\n            return dispatch(getCategoryPostsError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && [403].includes(response.status)) {\n            return dispatch(showAlert({ type: 'error', message: response.data.message }))\n          }\n          if (response && response.status >= 500) {\n            return dispatch(getCategoryPostsError('Oops! We did something wrong.'));\n          }\n          return dispatch(getCategoryPostsError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n//FILTER BLOG POSTS\nconst filterPostsRequest = () => {\n  return {\n    type: actions.FILTER_POSTS_REQUEST,\n  }\n}\n\nconst filterPostsError = (message) => {\n  return {\n    type: actions.FILTER_POSTS_ERROR,\n    error: message,\n  }\n}\n\nconst filterPostsSuccess = (data) => {\n  return {\n    type: actions.FILTER_POSTS_SUCCESS,\n    data,\n  }\n}\n\nexport const filterPosts = (search, page, limit) => {\n  return (dispatch, getState) => {\n    dispatch(filterPostsRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve, reject) => {\n\n      axios.get(`${CONFIG.BASE_URL}/blog/posts/filter?search=${search}&page=${page}&limit=${limit}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(filterPostsSuccess(response.data));\n          resolve(response.data?.data)\n        })\n        .catch(({ response }) => {\n          reject(response)\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n          if (response && [400, 404, 422, 403].includes(response.status)) {\n            return dispatch(filterPostsError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && response.status >= 500) {\n            return dispatch(filterPostsError('Oops! We did something wrong.'));\n          }\n          return dispatch(filterPostsError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}