{"ast":null,"code":"import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst clear = () => {\n  return {\n    type: actions.CLEAR\n  };\n};\n\nconst verifyIdentityRequest = () => {\n  return {\n    type: actions.VERIFY_IDENTITY_REQUEST\n  };\n};\n\nconst verifyIdentityError = message => {\n  return {\n    type: actions.VERIFY_IDENTITY_ERROR,\n    error: message\n  };\n};\n\nconst verifyIdentitySuccess = data => {\n  return {\n    type: actions.VERIFY_IDENTITY_SUCCESS,\n    data\n  };\n};\n\nconst confirmIdentityRequest = () => {\n  return {\n    type: actions.CONFIRM_IDENTITY_REQUEST\n  };\n};\n\nconst confirmIdentityError = message => {\n  return {\n    type: actions.CONFIRM_IDENTITY_ERROR,\n    error: message\n  };\n};\n\nconst confirmIdentitySuccess = data => {\n  return {\n    type: actions.CONFIRM_IDENTITY_SUCCESS,\n    data\n  };\n};\n\nconst submitOtpRequest = () => {\n  return {\n    type: actions.SUBMIT_OTP_REQUEST\n  };\n};\n\nconst submitOtpError = message => {\n  return {\n    type: actions.SUBMIT_OTP_ERROR,\n    error: message\n  };\n};\n\nconst submitOtpSuccess = data => {\n  return {\n    type: actions.SUBMIT_OTP_SUCCESS,\n    data\n  };\n};\n\nconst submitPinRequest = () => {\n  return {\n    type: actions.SUBMIT_PIN_REQUEST\n  };\n};\n\nconst submitPinError = message => {\n  return {\n    type: actions.SUBMIT_PIN_ERROR,\n    error: message\n  };\n};\n\nconst submitPinSuccess = data => {\n  return {\n    type: actions.SUBMIT_PIN_SUCCESS,\n    data\n  };\n};\n\nexport const verifyIdentity = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(verifyIdentityRequest());\n    const {\n      token\n    } = getState().user;\n    axios.post(`${CONFIG.BASE_URL}/profile/bvn`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if ([200, 201].includes(response.status)) {\n        dispatch(verifyIdentitySuccess(response.data.data));\n        history.push('/app/onboarding/confirm-identity');\n      }\n    }).catch(({\n      response\n    }) => {\n      response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 403].includes(response.status)) {\n        return dispatch(verifyIdentityError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(verifyIdentityError('Oops! We did something wrong.'));\n      }\n\n      dispatch(verifyIdentityError('Oops! We did something wrong.'));\n    });\n  };\n};\nexport const confirmIdentity = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(confirmIdentityRequest());\n    const {\n      token\n    } = getState().user;\n    fetch(`${CONFIG.BASE_URL}/profile/bvn/setup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(confirmIdentitySuccess(res));\n\n          if (payload.manual === true) {\n            setTimeout(() => dispatch(clear()), 4000);\n            return setTimeout(() => history.push('/app/onboarding/transaction-identity'), 4000);\n          }\n\n          return history.push('/app/onboarding/otp');\n        });\n      }\n\n      if ([400, 404].includes(response.status)) {\n        response.json().then(res => {\n          !res.error && res.message && dispatch(showAlert({\n            type: 'error',\n            message: res.message\n          }));\n          return dispatch(confirmIdentityError(res.error ? res.error : res.message));\n        });\n      }\n\n      if ([403].includes(response.status)) {\n        response.json().then(res => {\n          return dispatch(confirmIdentityError(res.message ? res.message : res.error));\n        });\n      }\n\n      if ([401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response.status >= 500) {\n        return dispatch(confirmIdentityError('Oops! We did something wrong.'));\n      }\n    }).catch(() => {\n      return dispatch(confirmIdentityError('Oops! We did something wrong.'));\n    });\n  };\n};\nexport const submitOtp = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(submitOtpRequest());\n    const {\n      token\n    } = getState().user;\n    fetch(`${CONFIG.BASE_URL}/profile/bvn/token/confirmation`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(submitOtpSuccess(res));\n          history.push('/app/onboarding/transaction-identity');\n        });\n      }\n\n      if ([400, 404].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(submitOtpError(res.message ? res.message : res.error));\n        });\n      }\n\n      if ([403].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(submitOtpError(res.message ? res.message : res.error));\n        });\n      }\n\n      if ([401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response.status >= 500) {\n        dispatch(submitOtpError('Oops! We did something wrong.'));\n      }\n    }).catch(() => {\n      dispatch(submitOtpError('Oops! We did something wrong.'));\n    });\n  };\n};\nexport const submitPin = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(submitPinRequest());\n    const {\n      token\n    } = getState().user;\n    fetch(`${CONFIG.BASE_URL}/profile/transaction`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(submitPinSuccess(res));\n          history.push('/app/onboarding/complete');\n        });\n      }\n\n      if ([400, 404].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(submitPinError(res.message ? res.message : res.error));\n        });\n      }\n\n      if ([403].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(submitPinError(res.message ? res.message : res.error));\n        });\n      }\n\n      if ([401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response.status >= 500) {\n        dispatch(submitPinError('Oops! We did something wrong.'));\n      }\n    }).catch(() => {\n      dispatch(submitPinError('Oops! We did something wrong.'));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/onboarding/actions.js"],"names":["axios","CONFIG","actions","logout","updateUser","showAlert","clear","type","CLEAR","verifyIdentityRequest","VERIFY_IDENTITY_REQUEST","verifyIdentityError","message","VERIFY_IDENTITY_ERROR","error","verifyIdentitySuccess","data","VERIFY_IDENTITY_SUCCESS","confirmIdentityRequest","CONFIRM_IDENTITY_REQUEST","confirmIdentityError","CONFIRM_IDENTITY_ERROR","confirmIdentitySuccess","CONFIRM_IDENTITY_SUCCESS","submitOtpRequest","SUBMIT_OTP_REQUEST","submitOtpError","SUBMIT_OTP_ERROR","submitOtpSuccess","SUBMIT_OTP_SUCCESS","submitPinRequest","SUBMIT_PIN_REQUEST","submitPinError","SUBMIT_PIN_ERROR","submitPinSuccess","SUBMIT_PIN_SUCCESS","verifyIdentity","payload","history","dispatch","getState","token","user","post","BASE_URL","headers","Authorization","then","response","authorization","includes","status","push","catch","setTimeout","confirmIdentity","fetch","method","body","JSON","stringify","json","res","manual","submitOtp","submitPin"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst clear = () => {\n  return {\n    type: actions.CLEAR,\n  }\n}\n\nconst verifyIdentityRequest = () => {\n  return {\n    type: actions.VERIFY_IDENTITY_REQUEST,\n  }\n}\n\nconst verifyIdentityError = (message) => {\n  return {\n    type: actions.VERIFY_IDENTITY_ERROR,\n    error: message,\n  }\n}\n\nconst verifyIdentitySuccess = (data) => {\n  return {\n    type: actions.VERIFY_IDENTITY_SUCCESS,\n    data,\n  }\n}\n\nconst confirmIdentityRequest = () => {\n  return {\n    type: actions.CONFIRM_IDENTITY_REQUEST,\n  }\n}\n\nconst confirmIdentityError = (message) => {\n  return {\n    type: actions.CONFIRM_IDENTITY_ERROR,\n    error: message,\n  }\n}\n\nconst confirmIdentitySuccess = (data) => {\n  return {\n    type: actions.CONFIRM_IDENTITY_SUCCESS,\n    data,\n  }\n}\n\nconst submitOtpRequest = () => {\n  return {\n    type: actions.SUBMIT_OTP_REQUEST,\n  }\n}\n\nconst submitOtpError = (message) => {\n  return {\n    type: actions.SUBMIT_OTP_ERROR,\n    error: message,\n  }\n}\n\nconst submitOtpSuccess = (data) => {\n  return {\n    type: actions.SUBMIT_OTP_SUCCESS,\n    data,\n  }\n}\n\nconst submitPinRequest = () => {\n  return {\n    type: actions.SUBMIT_PIN_REQUEST,\n  }\n}\n\nconst submitPinError = (message) => {\n  return {\n    type: actions.SUBMIT_PIN_ERROR,\n    error: message,\n  }\n}\n\nconst submitPinSuccess = (data) => {\n  return {\n    type: actions.SUBMIT_PIN_SUCCESS,\n    data,\n  }\n}\n\nexport const verifyIdentity = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(verifyIdentityRequest());\n\n    const { token } = getState().user;\n\n    axios.post(`${CONFIG.BASE_URL}/profile/bvn`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if ([200, 201].includes(response.status)) {\n          dispatch(verifyIdentitySuccess(response.data.data));\n          history.push('/app/onboarding/confirm-identity');\n        }\n      })\n      .catch(({ response }) => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 403].includes(response.status)) {\n          return dispatch(verifyIdentityError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(verifyIdentityError('Oops! We did something wrong.'));\n        }\n        dispatch(verifyIdentityError('Oops! We did something wrong.'));\n      })\n  }\n}\n\nexport const confirmIdentity = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(confirmIdentityRequest());\n\n    const { token } = getState().user;\n\n    fetch(`${CONFIG.BASE_URL}/profile/bvn/setup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(response => {\n        if ([200, 201].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(confirmIdentitySuccess(res));\n              if (payload.manual === true) {\n                setTimeout(() => dispatch(clear()), 4000)\n                return setTimeout(() => history.push('/app/onboarding/transaction-identity'), 4000)\n              }\n              return history.push('/app/onboarding/otp');\n            });\n        }\n        if ([400, 404].includes(response.status)) {\n          response.json()\n            .then(res => {\n              !res.error && res.message && dispatch(showAlert({ type: 'error', message: res.message }))\n              return dispatch(confirmIdentityError(res.error ? res.error : res.message));\n            })\n        }\n        if ([403].includes(response.status)) {\n          response.json()\n            .then(res => {\n              return dispatch(confirmIdentityError(res.message ? res.message : res.error));\n            })\n        }\n        if ([401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response.status >= 500) {\n          return dispatch(confirmIdentityError('Oops! We did something wrong.'));\n        }\n      })\n      .catch(() => {\n        return dispatch(confirmIdentityError('Oops! We did something wrong.'));\n      })\n  }\n}\n\nexport const submitOtp = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(submitOtpRequest());\n\n    const { token } = getState().user;\n\n    fetch(`${CONFIG.BASE_URL}/profile/bvn/token/confirmation`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(response => {\n        if ([200, 201].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(submitOtpSuccess(res));\n              history.push('/app/onboarding/transaction-identity');\n            });\n        }\n        if ([400, 404].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(submitOtpError(res.message ? res.message : res.error));\n            })\n        }\n        if ([403].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(submitOtpError(res.message ? res.message : res.error));\n            })\n        }\n        if ([401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response.status >= 500) {\n          dispatch(submitOtpError('Oops! We did something wrong.'));\n        }\n      })\n      .catch(() => {\n        dispatch(submitOtpError('Oops! We did something wrong.'));\n      })\n  }\n}\n\nexport const submitPin = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(submitPinRequest());\n\n    const { token } = getState().user;\n\n    fetch(`${CONFIG.BASE_URL}/profile/transaction`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(response => {\n        if ([200, 201].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(submitPinSuccess(res));\n              history.push('/app/onboarding/complete');\n            });\n        }\n        if ([400, 404].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(submitPinError(res.message ? res.message : res.error));\n            })\n        }\n        if ([403].includes(response.status)) {\n          response.json()\n            .then(res => {\n              dispatch(submitPinError(res.message ? res.message : res.error));\n            })\n        }\n        if ([401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response.status >= 500) {\n          dispatch(submitPinError('Oops! We did something wrong.'));\n        }\n      })\n      .catch(() => {\n        dispatch(submitPinError('Oops! We did something wrong.'));\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}