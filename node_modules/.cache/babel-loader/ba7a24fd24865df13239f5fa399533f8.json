{"ast":null,"code":"import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst clearData = () => {\n  return {\n    type: actions.CLEAR_DATA\n  };\n};\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR\n  };\n};\n\nconst depositFundsRequest = () => {\n  return {\n    type: actions.DEPOSIT_REQUEST\n  };\n};\n\nconst depositFundsError = message => {\n  return {\n    type: actions.DEPOSIT_ERROR,\n    error: message\n  };\n};\n\nconst depositFundsSuccess = data => {\n  return {\n    type: actions.DEPOSIT_SUCCESS,\n    data\n  };\n};\n\nexport const depositFunds = payload => {\n  return (dispatch, getState) => {\n    dispatch(depositFundsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.post(`${CONFIG.BASE_URL}/payment/initialize`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers;\n\n      ((_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if ([200, 201].includes(response.status)) {\n        var _response$data, _response$data$data;\n\n        dispatch(showAlert({\n          type: 'success',\n          message: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message\n        }));\n        dispatch(depositFundsSuccess(response.data));\n        window.location = (_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.authorization_url;\n      }\n    }).catch(({\n      response\n    }) => {\n      var _response$headers2;\n\n      ((_response$headers2 = response.headers) === null || _response$headers2 === void 0 ? void 0 : _response$headers2.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 403, 404, 422, 403].includes(response.status)) {\n        dispatch(depositFundsError(response.data.error ? response.data.error : response.data.message));\n        return setTimeout(() => dispatch(clearError()), 2000);\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(depositFundsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(depositFundsError('Oops! We did something wrong.'));\n    });\n  };\n}; //fetch all user's cards\n\nconst getCardsRequest = () => {\n  return {\n    type: actions.GET_ALL_CARDS_REQUEST\n  };\n};\n\nconst getCardsError = message => {\n  return {\n    type: actions.GET_ALL_CARDS_ERROR,\n    error: message\n  };\n};\n\nconst getCardsSuccess = data => {\n  return {\n    type: actions.GET_ALL_CARDS_SUCCESS,\n    data\n  };\n};\n\nexport const getCards = () => {\n  return (dispatch, getState) => {\n    dispatch(getCardsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/payment/cards`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers3;\n\n      ((_response$headers3 = response.headers) === null || _response$headers3 === void 0 ? void 0 : _response$headers3.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getCardsSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404].includes(response.status)) {\n        return dispatch(getCardsError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getCardsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getCardsError('Oops! We did something wrong.'));\n    });\n  };\n}; //fetch user's wallet details\n\nconst getWalletDetailsRequest = () => {\n  return {\n    type: actions.GET_WALLET_DETAILS_REQUEST\n  };\n};\n\nconst getWalletDetailsError = message => {\n  return {\n    type: actions.GET_WALLET_DETAILS_ERROR,\n    error: message\n  };\n};\n\nconst getWalletDetailsSuccess = data => {\n  return {\n    type: actions.GET_WALLET_DETAILS_SUCCESS,\n    data\n  };\n};\n\nexport const getWalletDetails = () => {\n  return (dispatch, getState) => {\n    dispatch(getWalletDetailsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/users/wallets`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers4;\n\n      ((_response$headers4 = response.headers) === null || _response$headers4 === void 0 ? void 0 : _response$headers4.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getWalletDetailsSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404].includes(response.status)) {\n        return dispatch(getWalletDetailsError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getWalletDetailsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getWalletDetailsError('Oops! We did something wrong.'));\n    });\n  };\n}; //deposit funds with existing card\n\nconst depositFundsCardRequest = () => {\n  return {\n    type: actions.DEPOSIT_CARD_REQUEST\n  };\n};\n\nconst depositFundsCardError = message => {\n  return {\n    type: actions.DEPOSIT_CARD_ERROR,\n    error: message\n  };\n};\n\nconst depositFundsCardSuccess = data => {\n  return {\n    type: actions.DEPOSIT_CARD_SUCCESS,\n    data\n  };\n};\n\nexport const depositFundsCard = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(depositFundsCardRequest());\n    const {\n      token\n    } = getState().user;\n    axios.post(`${CONFIG.BASE_URL}/payment/charge-card`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers5;\n\n      ((_response$headers5 = response.headers) === null || _response$headers5 === void 0 ? void 0 : _response$headers5.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if ([200, 201].includes(response.status)) {\n        var _response$data2;\n\n        dispatch(depositFundsCardSuccess(response.data));\n        dispatch(showAlert({\n          type: 'success',\n          message: (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.message\n        }));\n        setTimeout(() => history.push('/app/wallet'), 3000);\n      }\n    }).catch(({\n      response\n    }) => {\n      var _response$headers6;\n\n      ((_response$headers6 = response.headers) === null || _response$headers6 === void 0 ? void 0 : _response$headers6.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(depositFundsCardError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(depositFundsCardError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(depositFundsCardError('Oops! We did something wrong.'));\n    });\n  };\n}; //initialize Withdrawal from wallet\n\nconst initializeWithdrawRequest = () => {\n  return {\n    type: actions.INITIALIZE_WITHDRAWAL_REQUEST\n  };\n};\n\nconst initializeWithdrawError = message => {\n  return {\n    type: actions.INITIALIZE_WITHDRAWAL_ERROR,\n    error: message\n  };\n};\n\nconst initializeWithdrawSuccess = data => {\n  return {\n    type: actions.INITIALIZE_WITHDRAWAL_SUCCESS,\n    data\n  };\n};\n\nexport const initializeWithdraw = payload => {\n  return (dispatch, getState) => {\n    dispatch(initializeWithdrawRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise(resolve => {\n      axios.post(`${CONFIG.BASE_URL}/users/initialize-withdrawal`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if ([200, 201].includes(response.status)) {\n          resolve(response.data.data);\n          return dispatch(initializeWithdrawSuccess(response.data));\n        }\n      }).catch(({\n        response\n      }) => {\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          dispatch(initializeWithdrawError(response.data.error ? response.data.error : response.data.message));\n          return setTimeout(() => dispatch(clearError()), 3000);\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(initializeWithdrawError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(initializeWithdrawError('Oops! We did something wrong.'));\n      });\n    });\n  };\n}; //initialize Withdrawal from wallet\n\nconst confirmWithdrawRequest = () => {\n  return {\n    type: actions.CONFIRM_WITHDRAWAL_REQUEST\n  };\n};\n\nconst confirmWithdrawError = message => {\n  return {\n    type: actions.CONFIRM_WITHDRAWAL_ERROR,\n    error: message\n  };\n};\n\nconst confirmWithdrawSuccess = data => {\n  return {\n    type: actions.CONFIRM_WITHDRAWAL_SUCCESS,\n    data\n  };\n};\n\nexport const confirmWithdraw = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(confirmWithdrawRequest());\n    const {\n      token\n    } = getState().user;\n    axios.post(`${CONFIG.BASE_URL}/users/confirm-withdrawal`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers7;\n\n      ((_response$headers7 = response.headers) === null || _response$headers7 === void 0 ? void 0 : _response$headers7.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if ([200, 201].includes(response.status)) {\n        dispatch(confirmWithdrawSuccess(response.data));\n        return setTimeout(() => {\n          dispatch(clearData());\n          history.push('/app/wallet');\n        }, 2000);\n      }\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(confirmWithdrawError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(confirmWithdrawError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(confirmWithdrawError('Oops! We did something wrong.'));\n    });\n  };\n}; //get transaction history\n\nconst getTransactionHistoryRequest = () => {\n  return {\n    type: actions.GET_TRANSACTION_HISTORY_REQUEST\n  };\n};\n\nconst getTransactionHistoryError = message => {\n  return {\n    type: actions.GET_TRANSACTION_HISTORY_ERROR,\n    error: message\n  };\n};\n\nconst getTransactionHistorySuccess = data => {\n  return {\n    type: actions.GET_TRANSACTION_HISTORY_SUCCESS,\n    data\n  };\n};\n\nexport const getTransactionHistory = (limit, pageNumber) => {\n  return (dispatch, getState) => {\n    dispatch(getTransactionHistoryRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise(resolve => {\n      axios.get(`${CONFIG.BASE_URL}/users/transactions?limit=${limit}&page=${pageNumber}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if ([200, 201].includes(response.status)) {\n          var _response$data3;\n\n          resolve((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.data);\n          return dispatch(getTransactionHistorySuccess(response.data));\n        }\n      }).catch(({\n        response\n      }) => {\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getTransactionHistoryError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(getTransactionHistoryError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(getTransactionHistoryError('Oops! We did something wrong.'));\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/wallet/actions.js"],"names":["axios","CONFIG","actions","logout","updateUser","showAlert","clearData","type","CLEAR_DATA","clearError","CLEAR_ERROR","depositFundsRequest","DEPOSIT_REQUEST","depositFundsError","message","DEPOSIT_ERROR","error","depositFundsSuccess","data","DEPOSIT_SUCCESS","depositFunds","payload","dispatch","getState","token","user","post","BASE_URL","headers","Authorization","then","response","authorization","includes","status","window","location","authorization_url","catch","setTimeout","getCardsRequest","GET_ALL_CARDS_REQUEST","getCardsError","GET_ALL_CARDS_ERROR","getCardsSuccess","GET_ALL_CARDS_SUCCESS","getCards","get","getWalletDetailsRequest","GET_WALLET_DETAILS_REQUEST","getWalletDetailsError","GET_WALLET_DETAILS_ERROR","getWalletDetailsSuccess","GET_WALLET_DETAILS_SUCCESS","getWalletDetails","depositFundsCardRequest","DEPOSIT_CARD_REQUEST","depositFundsCardError","DEPOSIT_CARD_ERROR","depositFundsCardSuccess","DEPOSIT_CARD_SUCCESS","depositFundsCard","history","push","initializeWithdrawRequest","INITIALIZE_WITHDRAWAL_REQUEST","initializeWithdrawError","INITIALIZE_WITHDRAWAL_ERROR","initializeWithdrawSuccess","INITIALIZE_WITHDRAWAL_SUCCESS","initializeWithdraw","Promise","resolve","confirmWithdrawRequest","CONFIRM_WITHDRAWAL_REQUEST","confirmWithdrawError","CONFIRM_WITHDRAWAL_ERROR","confirmWithdrawSuccess","CONFIRM_WITHDRAWAL_SUCCESS","confirmWithdraw","getTransactionHistoryRequest","GET_TRANSACTION_HISTORY_REQUEST","getTransactionHistoryError","GET_TRANSACTION_HISTORY_ERROR","getTransactionHistorySuccess","GET_TRANSACTION_HISTORY_SUCCESS","getTransactionHistory","limit","pageNumber"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst clearData = () => {\n  return {\n    type: actions.CLEAR_DATA,\n  }\n}\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR,\n  }\n}\n\nconst depositFundsRequest = () => {\n  return {\n    type: actions.DEPOSIT_REQUEST,\n  }\n}\n\nconst depositFundsError = (message) => {\n  return {\n    type: actions.DEPOSIT_ERROR,\n    error: message,\n  }\n}\n\nconst depositFundsSuccess = (data) => {\n  return {\n    type: actions.DEPOSIT_SUCCESS,\n    data,\n  }\n}\n\nexport const depositFunds = (payload) => {\n  return (dispatch, getState) => {\n    dispatch(depositFundsRequest());\n\n    const { token } = getState().user;\n\n    axios.post(`${CONFIG.BASE_URL}/payment/initialize`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if ([200, 201].includes(response.status)) {\n          dispatch(showAlert({ type: 'success', message: response.data?.message }))\n          dispatch(depositFundsSuccess(response.data));\n          window.location = response.data.data?.authorization_url;\n        }\n      })\n      .catch(({ response }) => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 403, 404, 422, 403].includes(response.status)) {\n          dispatch(depositFundsError(response.data.error ? response.data.error : response.data.message));\n          return setTimeout(() => dispatch(clearError()), 2000)\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(depositFundsError('Oops! We did something wrong.'));\n        }\n        return dispatch(depositFundsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//fetch all user's cards\nconst getCardsRequest = () => {\n  return {\n    type: actions.GET_ALL_CARDS_REQUEST,\n  }\n}\n\nconst getCardsError = (message) => {\n  return {\n    type: actions.GET_ALL_CARDS_ERROR,\n    error: message,\n  }\n}\n\nconst getCardsSuccess = (data) => {\n  return {\n    type: actions.GET_ALL_CARDS_SUCCESS,\n    data,\n  }\n}\n\nexport const getCards = () => {\n  return (dispatch, getState) => {\n    dispatch(getCardsRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/payment/cards`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getCardsSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404].includes(response.status)) {\n          return dispatch(getCardsError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getCardsError('Oops! We did something wrong.'));\n        }\n        return dispatch(getCardsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//fetch user's wallet details\nconst getWalletDetailsRequest = () => {\n  return {\n    type: actions.GET_WALLET_DETAILS_REQUEST,\n  }\n}\n\nconst getWalletDetailsError = (message) => {\n  return {\n    type: actions.GET_WALLET_DETAILS_ERROR,\n    error: message,\n  }\n}\n\nconst getWalletDetailsSuccess = (data) => {\n  return {\n    type: actions.GET_WALLET_DETAILS_SUCCESS,\n    data,\n  }\n}\n\nexport const getWalletDetails = () => {\n  return (dispatch, getState) => {\n    dispatch(getWalletDetailsRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/users/wallets`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getWalletDetailsSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404].includes(response.status)) {\n          return dispatch(getWalletDetailsError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getWalletDetailsError('Oops! We did something wrong.'));\n        }\n        return dispatch(getWalletDetailsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//deposit funds with existing card\nconst depositFundsCardRequest = () => {\n  return {\n    type: actions.DEPOSIT_CARD_REQUEST,\n  }\n}\n\nconst depositFundsCardError = (message) => {\n  return {\n    type: actions.DEPOSIT_CARD_ERROR,\n    error: message,\n  }\n}\n\nconst depositFundsCardSuccess = (data) => {\n  return {\n    type: actions.DEPOSIT_CARD_SUCCESS,\n    data,\n  }\n}\n\nexport const depositFundsCard = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(depositFundsCardRequest());\n\n    const { token } = getState().user;\n\n    axios.post(`${CONFIG.BASE_URL}/payment/charge-card`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if ([200, 201].includes(response.status)) {\n          dispatch(depositFundsCardSuccess(response.data));\n          dispatch(showAlert({ type: 'success', message: response.data?.message }))\n          setTimeout(() => history.push('/app/wallet'), 3000);\n        }\n      })\n      .catch(({ response }) => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(depositFundsCardError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(depositFundsCardError('Oops! We did something wrong.'));\n        }\n        return dispatch(depositFundsCardError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//initialize Withdrawal from wallet\nconst initializeWithdrawRequest = () => {\n  return {\n    type: actions.INITIALIZE_WITHDRAWAL_REQUEST,\n  }\n}\n\nconst initializeWithdrawError = (message) => {\n  return {\n    type: actions.INITIALIZE_WITHDRAWAL_ERROR,\n    error: message,\n  }\n}\n\nconst initializeWithdrawSuccess = (data) => {\n  return {\n    type: actions.INITIALIZE_WITHDRAWAL_SUCCESS,\n    data,\n  }\n}\n\nexport const initializeWithdraw = (payload) => {\n  return (dispatch, getState) => {\n    dispatch(initializeWithdrawRequest());\n\n    const { token } = getState().user;\n\n    return new Promise((resolve) => {\n      axios.post(`${CONFIG.BASE_URL}/users/initialize-withdrawal`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if ([200, 201].includes(response.status)) {\n            resolve(response.data.data)\n            return dispatch(initializeWithdrawSuccess(response.data));\n          }\n        })\n        .catch(({ response }) => {\nresponse && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n          if (response && [400, 404, 422, 403].includes(response.status)) {\n            dispatch(initializeWithdrawError(response.data.error ? response.data.error : response.data.message));\n            return setTimeout(() => dispatch(clearError()), 3000)\n          }\n\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && response.status >= 500) {\n            return dispatch(initializeWithdrawError('Oops! We did something wrong.'));\n          }\n          return dispatch(initializeWithdrawError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\n//initialize Withdrawal from wallet\nconst confirmWithdrawRequest = () => {\n  return {\n    type: actions.CONFIRM_WITHDRAWAL_REQUEST,\n  }\n}\n\nconst confirmWithdrawError = (message) => {\n  return {\n    type: actions.CONFIRM_WITHDRAWAL_ERROR,\n    error: message,\n  }\n}\n\nconst confirmWithdrawSuccess = (data) => {\n  return {\n    type: actions.CONFIRM_WITHDRAWAL_SUCCESS,\n    data,\n  }\n}\n\nexport const confirmWithdraw = (payload, history) => {\n  return (dispatch, getState) => {\n    dispatch(confirmWithdrawRequest());\n\n    const { token } = getState().user;\n\n    axios.post(`${CONFIG.BASE_URL}/users/confirm-withdrawal`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n       response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if ([200, 201].includes(response.status)) {\n          dispatch(confirmWithdrawSuccess(response.data));\n          return setTimeout(() => {\n            dispatch(clearData())\n            history.push('/app/wallet')\n          }, 2000)\n        }\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(confirmWithdrawError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(confirmWithdrawError('Oops! We did something wrong.'));\n        }\n        return dispatch(confirmWithdrawError('Oops! We did something wrong.'));\n      })\n  }\n}\n\n//get transaction history\nconst getTransactionHistoryRequest = () => {\n  return {\n    type: actions.GET_TRANSACTION_HISTORY_REQUEST,\n  }\n}\n\nconst getTransactionHistoryError = (message) => {\n  return {\n    type: actions.GET_TRANSACTION_HISTORY_ERROR,\n    error: message,\n  }\n}\n\nconst getTransactionHistorySuccess = (data) => {\n  return {\n    type: actions.GET_TRANSACTION_HISTORY_SUCCESS,\n    data,\n  }\n}\n\nexport const getTransactionHistory = (limit, pageNumber) => {\n  return (dispatch, getState) => {\n    dispatch(getTransactionHistoryRequest());\n\n    const { token } = getState().user;\n    return new Promise((resolve) => {\n      axios.get(`${CONFIG.BASE_URL}/users/transactions?limit=${limit}&page=${pageNumber}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n         response.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if ([200, 201].includes(response.status)) {\n            resolve(response.data?.data);\n            return dispatch(getTransactionHistorySuccess(response.data));\n          }\n        })\n        .catch(({ response }) => {\nresponse && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n          if (response && [400, 404, 422, 403].includes(response.status)) {\n            return dispatch(getTransactionHistoryError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && response.status >= 500) {\n            return dispatch(getTransactionHistoryError('Oops! We did something wrong.'));\n          }\n          return dispatch(getTransactionHistoryError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}