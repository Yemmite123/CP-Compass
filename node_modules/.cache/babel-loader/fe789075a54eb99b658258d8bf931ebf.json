{"ast":null,"code":"import axios from 'axios';\nimport io from \"socket.io-client\";\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst getAllNotificationsRequest = () => {\n  return {\n    type: actions.GET_ALL_NOTIFICATIONS_REQUEST\n  };\n};\n\nconst getAllNotificationsError = message => {\n  return {\n    type: actions.GET_ALL_NOTIFICATIONS_ERROR,\n    error: message\n  };\n};\n\nconst getAllNotificationsSuccess = data => {\n  return {\n    type: actions.GET_ALL_NOTIFICATIONS_SUCCESS,\n    data\n  };\n};\n\nexport const getAllNotifications = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getAllNotificationsRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/notification?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers;\n\n      ((_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getAllNotificationsSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(getAllNotificationsError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getAllNotificationsError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getAllNotificationsError('Oops! We did something wrong.'));\n    });\n  };\n};\n\nconst updateNotificationRequest = () => {\n  return {\n    type: actions.UPDATE_NOTIFICATION_REQUEST\n  };\n};\n\nconst updateNotificationError = message => {\n  return {\n    type: actions.UPDATE_NOTIFICATION_ERROR,\n    error: message\n  };\n};\n\nconst updateNotificationSuccess = data => {\n  return {\n    type: actions.UPDATE_NOTIFICATION_SUCCESS,\n    data\n  };\n};\n\nexport const updateNotification = (id, payload) => {\n  return (dispatch, getState) => {\n    dispatch(updateNotificationRequest());\n    const {\n      token\n    } = getState().user;\n    return new Promise((resolve, reject) => {\n      axios.put(`${CONFIG.BASE_URL}/notification/${id}/read`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token\n        }\n      }).then(response => {\n        var _response$headers2;\n\n        ((_response$headers2 = response.headers) === null || _response$headers2 === void 0 ? void 0 : _response$headers2.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n        dispatch(updateNotificationSuccess(response.data));\n        resolve(response.data);\n      }).catch(({\n        response\n      }) => {\n        response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n          token: response.headers.authorization\n        }));\n\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(updateNotificationError(response.data.error ? response.data.error : response.data.message));\n        }\n\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({\n            type: 'error',\n            message: 'Your session has expired'\n          }));\n          return setTimeout(() => dispatch(logout()), 2000);\n        }\n\n        if (response && response.status >= 500) {\n          return dispatch(updateNotificationError('Oops! We did something wrong.'));\n        }\n\n        return dispatch(updateNotificationError('Oops! We did something wrong.'));\n      });\n    });\n  };\n};\n\nconst deleteNotificationRequest = () => {\n  return {\n    type: actions.DELETE_NOTIFICATION_REQUEST\n  };\n};\n\nconst deleteNotificationError = message => {\n  return {\n    type: actions.DELETE_NOTIFICATION_ERROR,\n    error: message\n  };\n};\n\nconst deleteNotificationSuccess = data => {\n  return {\n    type: actions.DELETE_NOTIFICATION_SUCCESS,\n    data\n  };\n};\n\nexport const deleteNotification = (id, payload) => {\n  return (dispatch, getState) => {\n    dispatch(deleteNotificationRequest());\n    const {\n      token\n    } = getState().user;\n    axios.delete(`${CONFIG.BASE_URL}/notification/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      var _response$headers3;\n\n      ((_response$headers3 = response.headers) === null || _response$headers3 === void 0 ? void 0 : _response$headers3.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(deleteNotificationSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && (response === null || response === void 0 ? void 0 : response.headers.authorization) && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(deleteNotificationError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(deleteNotificationError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(deleteNotificationError('Oops! We did something wrong.'));\n    });\n  };\n};\n\nconst addNewNotificationSuccess = data => {\n  return {\n    type: actions.ADD_NEW_NOTIFICATION_SUCCESS,\n    data\n  };\n};\n\nexport const connectToSocket = () => {\n  return (dispatch, getState) => {\n    const {\n      token\n    } = getState().user;\n    const socket = io(CONFIG.BASE_URL, {\n      query: `token=${token && token.split(' ')[1]}`\n    });\n    socket.connect();\n    socket.on('connect', () => {\n      socket.on('notifications', data => {\n        console.log(data);\n        dispatch(addNewNotificationSuccess(data));\n      });\n      socket.on(\"disconnect\", () => {\n        socket.removeAllListeners('notifications');\n        socket.removeAllListeners('disconnect');\n        socket.removeAllListeners('authenticateSocket');\n        socket.removeAllListeners('setAuthenticated');\n        socket.removeAllListeners('registerSocket');\n        socket.removeAllListeners('newConnection');\n        socket.connect();\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/notifications/actions.js"],"names":["axios","io","CONFIG","actions","logout","updateUser","showAlert","getAllNotificationsRequest","type","GET_ALL_NOTIFICATIONS_REQUEST","getAllNotificationsError","message","GET_ALL_NOTIFICATIONS_ERROR","error","getAllNotificationsSuccess","data","GET_ALL_NOTIFICATIONS_SUCCESS","getAllNotifications","limit","page","dispatch","getState","token","user","get","BASE_URL","headers","Authorization","then","response","authorization","catch","includes","status","setTimeout","updateNotificationRequest","UPDATE_NOTIFICATION_REQUEST","updateNotificationError","UPDATE_NOTIFICATION_ERROR","updateNotificationSuccess","UPDATE_NOTIFICATION_SUCCESS","updateNotification","id","payload","Promise","resolve","reject","put","deleteNotificationRequest","DELETE_NOTIFICATION_REQUEST","deleteNotificationError","DELETE_NOTIFICATION_ERROR","deleteNotificationSuccess","DELETE_NOTIFICATION_SUCCESS","deleteNotification","delete","addNewNotificationSuccess","ADD_NEW_NOTIFICATION_SUCCESS","connectToSocket","socket","query","split","connect","on","console","log","removeAllListeners"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport io from \"socket.io-client\";\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst getAllNotificationsRequest = () => {\n  return {\n    type: actions.GET_ALL_NOTIFICATIONS_REQUEST,\n  }\n}\n\nconst getAllNotificationsError = (message) => {\n  return {\n    type: actions.GET_ALL_NOTIFICATIONS_ERROR,\n    error: message,\n  }\n}\n\nconst getAllNotificationsSuccess = (data) => {\n  return {\n    type: actions.GET_ALL_NOTIFICATIONS_SUCCESS,\n    data,\n  }\n}\n\nexport const getAllNotifications = (limit, page) => {\n  return (dispatch, getState) => {\n    dispatch(getAllNotificationsRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/notification?limit=${limit}&page=${page}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n        response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getAllNotificationsSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getAllNotificationsError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getAllNotificationsError('Oops! We did something wrong.'));\n        }\n        return dispatch(getAllNotificationsError('Oops! We did something wrong.'));\n      })\n  }\n}\n\nconst updateNotificationRequest = () => {\n  return {\n    type: actions.UPDATE_NOTIFICATION_REQUEST,\n  }\n}\n\nconst updateNotificationError = (message) => {\n  return {\n    type: actions.UPDATE_NOTIFICATION_ERROR,\n    error: message,\n  }\n}\n\nconst updateNotificationSuccess = (data) => {\n  return {\n    type: actions.UPDATE_NOTIFICATION_SUCCESS,\n    data,\n  }\n}\n\nexport const updateNotification = (id, payload) => {\n  return (dispatch, getState) => {\n    dispatch(updateNotificationRequest());\n\n    const { token } = getState().user;\n\n    return new Promise((resolve, reject) => {\n      axios.put(`${CONFIG.BASE_URL}/notification/${id}/read`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n      })\n        .then(response => {\n          response.headers?.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          dispatch(updateNotificationSuccess(response.data));\n          resolve(response.data);\n        })\n        .catch(({ response }) => {\n          response && response?.headers.authorization && dispatch(updateUser({\n            token: response.headers.authorization\n          }))\n          if (response && [400, 404, 422, 403].includes(response.status)) {\n            return dispatch(updateNotificationError(response.data.error ? response.data.error : response.data.message));\n          }\n          if (response && [401].includes(response.status)) {\n            dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n            return setTimeout(() => dispatch(logout()), 2000)\n          }\n          if (response && response.status >= 500) {\n            return dispatch(updateNotificationError('Oops! We did something wrong.'));\n          }\n          return dispatch(updateNotificationError('Oops! We did something wrong.'));\n        })\n    })\n  }\n}\n\nconst deleteNotificationRequest = () => {\n  return {\n    type: actions.DELETE_NOTIFICATION_REQUEST,\n  }\n}\n\nconst deleteNotificationError = (message) => {\n  return {\n    type: actions.DELETE_NOTIFICATION_ERROR,\n    error: message,\n  }\n}\n\nconst deleteNotificationSuccess = (data) => {\n  return {\n    type: actions.DELETE_NOTIFICATION_SUCCESS,\n    data,\n  }\n}\n\nexport const deleteNotification = (id, payload) => {\n  return (dispatch, getState) => {\n    dispatch(deleteNotificationRequest());\n\n    const { token } = getState().user;\n\n    axios.delete(`${CONFIG.BASE_URL}/notification/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n        response.headers?.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(deleteNotificationSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response?.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(deleteNotificationError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(deleteNotificationError('Oops! We did something wrong.'));\n        }\n        return dispatch(deleteNotificationError('Oops! We did something wrong.'));\n      })\n  }\n}\n\nconst addNewNotificationSuccess = (data) => {\n  return {\n    type: actions.ADD_NEW_NOTIFICATION_SUCCESS,\n    data,\n  }\n}\n\nexport const connectToSocket = () => {\n  return (dispatch, getState) => {\n\n    const { token } = getState().user;\n    const socket = io(CONFIG.BASE_URL, { query: `token=${token && token.split(' ')[1]}` });\n    socket.connect();\n\n    socket.on('connect', () => {\n\n      socket.on('notifications', (data) => {\n        console.log(data);\n        dispatch(addNewNotificationSuccess(data));\n      });\n\n      socket.on(\"disconnect\", () => {\n        socket.removeAllListeners('notifications');\n        socket.removeAllListeners('disconnect');\n        socket.removeAllListeners('authenticateSocket');\n        socket.removeAllListeners('setAuthenticated');\n        socket.removeAllListeners('registerSocket');\n        socket.removeAllListeners('newConnection');\n        socket.connect();\n      });\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}