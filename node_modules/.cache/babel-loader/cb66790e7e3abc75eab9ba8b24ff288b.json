{"ast":null,"code":"import CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { updateUser } from \"#/store/user/actions\";\n\nconst clear = () => {\n  return {\n    type: actions.CLEAR\n  };\n};\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR\n  };\n};\n\nconst registerRequest = () => {\n  return {\n    type: actions.REGISTER_REQUEST\n  };\n};\n\nconst registerSuccess = data => {\n  return {\n    type: actions.REGISTER_SUCCESS,\n    data\n  };\n};\n\nconst registerError = message => {\n  return {\n    type: actions.REGISTER_ERROR,\n    error: message\n  };\n};\n\nconst verifyEmailRequest = () => {\n  return {\n    type: actions.VERIFY_EMAIL_REQUEST\n  };\n};\n\nconst verifyEmailSuccess = data => {\n  return {\n    type: actions.VERIFY_EMAIL_SUCCESS,\n    data\n  };\n};\n\nconst verifyEmailError = message => {\n  return {\n    type: actions.VERIFY_EMAIL_ERROR,\n    error: message\n  };\n};\n\nconst resendTokenRequest = () => {\n  return {\n    type: actions.RESEND_TOKEN_REQUEST\n  };\n};\n\nconst resendTokenSuccess = data => {\n  return {\n    type: actions.RESEND_TOKEN_SUCCESS,\n    data\n  };\n};\n\nconst resendTokenError = message => {\n  return {\n    type: actions.RESEND_TOKEN_ERROR,\n    error: message\n  };\n};\n\nexport const register = (payload, history) => {\n  return dispatch => {\n    dispatch(registerRequest());\n    fetch(`${CONFIG.BASE_URL}/auth/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(updateUser({\n            emailAddress: payload.email\n          }));\n          dispatch(registerSuccess(res));\n          setTimeout(() => {\n            dispatch(clear());\n            history.push(\"/register/confirm-email\");\n          }, 3000);\n        });\n      }\n\n      if (response.status === 400) {\n        response.json().then(res => {\n          dispatch(registerError(res.error ? res.error : res.message));\n        });\n      }\n\n      if (response.status >= 500) {\n        dispatch(registerError(`Oops! We did something wrong.`));\n        setTimeout(() => dispatch(clearError()), 5000);\n      }\n    }).catch(() => {\n      dispatch(registerError(`Oops! We did something wrong.`));\n    });\n  };\n};\nexport const verifyEmail = (email, token, history) => {\n  return dispatch => {\n    dispatch(verifyEmailRequest());\n    fetch(`${CONFIG.BASE_URL}/auth/email/${email}/verification/${token}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(verifyEmailSuccess(res));\n          setTimeout(() => history.push(\"/login\"), 5000);\n        });\n      }\n\n      if ([400, 404, 422, 403].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(verifyEmailError(res.message ? res.message : res.error));\n          setTimeout(() => {\n            history.push(\"/register/signup\");\n            dispatch(clearError());\n          }, 7000);\n        });\n      }\n\n      if (response.status >= 500) {\n        dispatch(verifyEmailError(`Oops! We did something wrong.`));\n      }\n    }).catch(() => {\n      dispatch(verifyEmailError(`Oops! We did something wrong.`));\n    });\n  };\n};\nexport const resendToken = email => {\n  const payload = {\n    email\n  };\n  return dispatch => {\n    dispatch(resendTokenRequest());\n    fetch(`${CONFIG.BASE_URL}/auth/email/resend/token`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(resendTokenSuccess(res));\n          setTimeout(() => dispatch(clear()), 3000);\n        });\n      }\n\n      if ([400, 404].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(resendTokenError(res.message ? res.message : res.error));\n        });\n      }\n\n      if (response.status >= 500) {\n        dispatch(resendTokenError(`Oops! We did something wrong.`));\n      }\n    }).catch(() => {\n      dispatch(resendTokenError(`Oops! We did something wrong.`));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/register/actions.js"],"names":["CONFIG","actions","updateUser","clear","type","CLEAR","clearError","CLEAR_ERROR","registerRequest","REGISTER_REQUEST","registerSuccess","data","REGISTER_SUCCESS","registerError","message","REGISTER_ERROR","error","verifyEmailRequest","VERIFY_EMAIL_REQUEST","verifyEmailSuccess","VERIFY_EMAIL_SUCCESS","verifyEmailError","VERIFY_EMAIL_ERROR","resendTokenRequest","RESEND_TOKEN_REQUEST","resendTokenSuccess","RESEND_TOKEN_SUCCESS","resendTokenError","RESEND_TOKEN_ERROR","register","payload","history","dispatch","fetch","BASE_URL","method","headers","body","JSON","stringify","then","response","includes","status","json","res","emailAddress","email","setTimeout","push","catch","verifyEmail","token","resendToken"],"mappings":"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","sourcesContent":["import CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { updateUser } from \"#/store/user/actions\";\n\nconst clear = () => {\n    return {\n        type: actions.CLEAR,\n    }\n}\n\nconst clearError = () => {\n    return {\n        type: actions.CLEAR_ERROR,\n    }\n}\n\nconst registerRequest = () => {\n    return {\n        type: actions.REGISTER_REQUEST,\n    }\n}\n\nconst registerSuccess = (data) => {\n    return {\n        type: actions.REGISTER_SUCCESS,\n        data\n    }\n}\n\nconst registerError = (message) => {\n    return {\n        type: actions.REGISTER_ERROR,\n        error: message\n    }\n}\n\nconst verifyEmailRequest = () => {\n    return {\n        type: actions.VERIFY_EMAIL_REQUEST,\n    }\n}\n\nconst verifyEmailSuccess = (data) => {\n    return {\n        type: actions.VERIFY_EMAIL_SUCCESS,\n        data\n    }\n}\n\nconst verifyEmailError = (message) => {\n    return {\n        type: actions.VERIFY_EMAIL_ERROR,\n        error: message\n    }\n}\n\nconst resendTokenRequest = () => {\n    return {\n        type: actions.RESEND_TOKEN_REQUEST,\n    }\n}\n\nconst resendTokenSuccess = (data) => {\n    return {\n        type: actions.RESEND_TOKEN_SUCCESS,\n        data\n    }\n}\n\nconst resendTokenError = (message) => {\n    return {\n        type: actions.RESEND_TOKEN_ERROR,\n        error: message\n    }\n}\n\nexport const register = (payload, history) => {\n    return (dispatch) => {\n        dispatch(registerRequest());\n\n        fetch(`${CONFIG.BASE_URL}/auth/signup`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => {\n                if ([200, 201].includes(response.status)) {\n                    response.json()\n                        .then(res => {\n                            dispatch(updateUser({ emailAddress: payload.email }));\n                            dispatch(registerSuccess(res));\n                            setTimeout(() => {\n                                dispatch(clear())\n                                history.push(\"/register/confirm-email\")\n                            }, 3000);\n                        });\n                }\n                if (response.status === 400) {\n                    response.json()\n                        .then(res => {\n                            dispatch(registerError(res.error ? res.error : res.message));\n                        })\n                }\n\n                if (response.status >= 500) {\n                    dispatch(registerError(`Oops! We did something wrong.`));\n                    setTimeout(() => dispatch(clearError()), 5000);\n                }\n            })\n            .catch(() => {\n                dispatch(registerError(`Oops! We did something wrong.`));\n            })\n    }\n}\n\nexport const verifyEmail = (email, token, history) => {\n    return (dispatch) => {\n        dispatch(verifyEmailRequest());\n\n        fetch(`${CONFIG.BASE_URL}/auth/email/${email}/verification/${token}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        })\n            .then(response => {\n                if ([200, 201].includes(response.status)) {\n                    response.json()\n                        .then(res => {\n                            dispatch(verifyEmailSuccess(res));\n                            setTimeout(() => history.push(\"/login\"), 5000);\n                        });\n                }\n                if ([400, 404, 422, 403].includes(response.status)) {\n                    response.json()\n                        .then(res => {\n                            dispatch(verifyEmailError(res.message ? res.message : res.error));\n                            setTimeout(() => {\n                                history.push(\"/register/signup\")\n                                dispatch(clearError());\n                            }, 7000);\n                        })\n                }\n\n                if (response.status >= 500) {\n                    dispatch(verifyEmailError(`Oops! We did something wrong.`));\n                }\n            })\n            .catch(() => {\n                dispatch(verifyEmailError(`Oops! We did something wrong.`));\n            })\n    }\n}\n\nexport const resendToken = (email) => {\n    const payload = { email };\n    return (dispatch) => {\n        dispatch(resendTokenRequest());\n\n        fetch(`${CONFIG.BASE_URL}/auth/email/resend/token`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => {\n\n                if ([200, 201].includes(response.status)) {\n                    response.json()\n                        .then(res => {\n                            dispatch(resendTokenSuccess(res));\n                            setTimeout(() => dispatch(clear()), 3000);\n                        });\n                }\n                if ([400, 404].includes(response.status)) {\n                    response.json()\n                        .then(res => {\n                            dispatch(resendTokenError(res.message ? res.message : res.error));\n                        })\n                }\n\n                if (response.status >= 500) {\n                    dispatch(resendTokenError(`Oops! We did something wrong.`));\n                }\n            })\n            .catch(() => {\n                dispatch(resendTokenError(`Oops! We did something wrong.`));\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}