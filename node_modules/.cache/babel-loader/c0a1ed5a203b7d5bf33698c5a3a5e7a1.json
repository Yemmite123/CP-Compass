{"ast":null,"code":"import CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { updateUser } from \"#/store/user/actions\";\n\nconst clear = () => {\n  return {\n    type: actions.CLEAR\n  };\n};\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR\n  };\n};\n\nconst loginRequest = () => {\n  return {\n    type: actions.LOGIN_REQUEST\n  };\n};\n\nconst loginError = message => {\n  return {\n    type: actions.LOGIN_ERROR,\n    error: message\n  };\n};\n\nconst loginSuccess = () => {\n  return {\n    type: actions.LOGIN_SUCCESS\n  };\n};\n\nconst sendResetLinkRequest = () => {\n  return {\n    type: actions.SEND_RESET_LINK_REQUEST\n  };\n};\n\nconst sendResetLinkSuccess = data => {\n  return {\n    type: actions.SEND_RESET_LINK_SUCCESS,\n    data\n  };\n};\n\nconst sendResetLinkError = error => {\n  return {\n    type: actions.SEND_RESET_LINK_ERROR,\n    error\n  };\n};\n\nconst resetPasswordRequest = () => {\n  return {\n    type: actions.RESET_PASSWORD_REQUEST\n  };\n};\n\nconst resetPasswordSuccess = data => {\n  return {\n    type: actions.RESET_PASSWORD_SUCCESS,\n    data\n  };\n};\n\nconst resetPasswordError = error => {\n  return {\n    type: actions.RESET_PASSWORD_ERROR,\n    error\n  };\n};\n\nexport const login = (payload, history) => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`${CONFIG.BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          if (res.isStaff === true) {\n            dispatch(loginError('unauthorized'));\n            return setTimeout(() => dispatch(clearError()), 5000);\n          }\n\n          dispatch(updateUser({\n            emailAddress: payload.email,\n            token: `Bearer ${res.token}`,\n            authorized: true,\n            isBvnActive: res.isBvnActive,\n            isStaff: res.isStaff\n          }));\n          dispatch(loginSuccess());\n\n          if (sessionStorage.getItem('redirectOnLogin') && document.referrer) {\n            sessionStorage.removeItem('redirectOnLogin');\n            window.location = document.referrer;\n            return;\n          }\n\n          history.push('/app/onboarding');\n        });\n      }\n\n      if ([400, 403, 404].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(loginError(res.error ? res.error : res.message));\n          setTimeout(() => dispatch(clearError()), 5000);\n        });\n      }\n\n      if ([401].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(loginError(res.message ? res.message : res.error));\n          setTimeout(() => dispatch(clearError()), 5000);\n\n          if (res.message && res.message.includes('Unverified')) {\n            dispatch(updateUser({\n              emailAddress: payload.email,\n              token: false,\n              authorized: false\n            }));\n            setTimeout(() => history.push(\"/register/confirm-email\"), 3000);\n          }\n        });\n      }\n\n      if (response.status >= 500) {\n        dispatch(loginError('Oops! We did something wrong.'));\n        setTimeout(() => dispatch(clearError()), 5000);\n      }\n    }).catch(() => {\n      dispatch(loginError('Oops! We did something wrong.'));\n    });\n  };\n}; // to send the password reset link\n\nexport const sendResetLink = (email, history) => {\n  return dispatch => {\n    dispatch(sendResetLinkRequest());\n    const payload = {\n      email\n    };\n    fetch(`${CONFIG.BASE_URL}/auth/password/forgot`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(sendResetLinkSuccess(!history && res));\n          history && history.push({\n            pathname: \"/forgot-password-confirmation\",\n            state: payload\n          });\n          setTimeout(() => dispatch(clear()), 5000);\n        });\n      }\n\n      if ([400, 401, 404, 403].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(sendResetLinkError(res.error ? res.error : res.message));\n        });\n      }\n\n      if (response.status >= 500) {\n        dispatch(sendResetLinkError('Oops! We did something wrong.'));\n      }\n    }).catch(() => {\n      dispatch(sendResetLinkError('Oops! We did something wrong.'));\n    });\n  };\n};\nexport const resetPassword = (payload, history) => {\n  return dispatch => {\n    dispatch(resetPasswordRequest());\n    fetch(`${CONFIG.BASE_URL}/auth/password/reset`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if ([200, 201].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(resetPasswordSuccess(res));\n          setTimeout(() => history.push('/login'), 3000);\n        });\n      }\n\n      if ([400, 401, 404, 403].includes(response.status)) {\n        response.json().then(res => {\n          dispatch(resetPasswordError(res.error ? res.error : res.message));\n        });\n      }\n\n      if (response.status >= 500) {\n        dispatch(resetPasswordError('Oops! We did something wrong.'));\n        setTimeout(() => dispatch(clearError()), 5000);\n      }\n    }).catch(() => {\n      dispatch(resetPasswordError('Oops! We did something wrong.'));\n      setTimeout(() => dispatch(clearError()), 5000);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/login/actions.js"],"names":["CONFIG","actions","updateUser","clear","type","CLEAR","clearError","CLEAR_ERROR","loginRequest","LOGIN_REQUEST","loginError","message","LOGIN_ERROR","error","loginSuccess","LOGIN_SUCCESS","sendResetLinkRequest","SEND_RESET_LINK_REQUEST","sendResetLinkSuccess","data","SEND_RESET_LINK_SUCCESS","sendResetLinkError","SEND_RESET_LINK_ERROR","resetPasswordRequest","RESET_PASSWORD_REQUEST","resetPasswordSuccess","RESET_PASSWORD_SUCCESS","resetPasswordError","RESET_PASSWORD_ERROR","login","payload","history","dispatch","fetch","BASE_URL","method","headers","body","JSON","stringify","then","response","includes","status","json","res","isStaff","setTimeout","emailAddress","email","token","authorized","isBvnActive","sessionStorage","getItem","document","referrer","removeItem","window","location","push","catch","sendResetLink","pathname","state","resetPassword"],"mappings":"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","sourcesContent":["import CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { updateUser } from \"#/store/user/actions\";\n\nconst clear = () => {\n  return {\n    type: actions.CLEAR,\n  }\n}\n\nconst clearError = () => {\n  return {\n    type: actions.CLEAR_ERROR,\n  }\n}\n\nconst loginRequest = () => {\n  return {\n      type: actions.LOGIN_REQUEST,\n  }\n}\n\nconst loginError = (message) => {\n  return {\n    type: actions.LOGIN_ERROR,\n    error: message,\n  }\n}\n\nconst loginSuccess = () => {\n  return {\n      type: actions.LOGIN_SUCCESS,\n  }\n}\n\nconst sendResetLinkRequest = () => {\n  return {\n    type: actions.SEND_RESET_LINK_REQUEST,\n  }\n}\n\nconst sendResetLinkSuccess = (data) => {\n  return {\n    type: actions.SEND_RESET_LINK_SUCCESS,\n    data\n  }\n}\n\nconst sendResetLinkError = (error) => {\n  return {\n    type: actions.SEND_RESET_LINK_ERROR,\n    error,\n  }\n}\n\nconst resetPasswordRequest = () => {\n  return {\n    type: actions.RESET_PASSWORD_REQUEST,\n  }\n}\n\nconst resetPasswordSuccess = (data) => {\n  return {\n    type: actions.RESET_PASSWORD_SUCCESS,\n    data\n  }\n}\n\nconst resetPasswordError = (error) => {\n  return {\n    type: actions.RESET_PASSWORD_ERROR,\n    error,\n  }\n}\n\nexport const login = (payload, history) => {\n  return (dispatch) => {\n    dispatch(loginRequest());\n\n    fetch(`${CONFIG.BASE_URL}/auth/login`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n    })\n    .then(response => {\n        if ([200, 201].includes(response.status)) {\n          response.json()\n          .then(res => {\n            if(res.isStaff === true) {\n              dispatch(loginError('unauthorized'));\n              return setTimeout(() => dispatch(clearError()), 5000);\n            }\n            dispatch(updateUser({ \n              emailAddress: payload.email,\n              token: `Bearer ${res.token}`,\n              authorized: true,\n              isBvnActive: res.isBvnActive,\n              isStaff: res.isStaff,\n            }));\n            dispatch(loginSuccess());\n            if(sessionStorage.getItem('redirectOnLogin') && document.referrer) {\n              sessionStorage.removeItem('redirectOnLogin');\n              window.location = document.referrer;\n              return;\n            }\n            history.push('/app/onboarding');\n          });\n        }\n\n        if ([400, 403, 404].includes(response.status)) {\n          response.json()\n          .then(res => {\n              dispatch(loginError(res.error ? res.error : res.message));\n              setTimeout(() => dispatch(clearError()), 5000);\n          })\n        }\n        if ([401].includes(response.status)) {\n          response.json()\n          .then(res => {\n              dispatch(loginError(res.message ? res.message : res.error));\n              setTimeout(() => dispatch(clearError()), 5000);\n              if( res.message && res.message.includes('Unverified')){\n                dispatch(updateUser({ emailAddress: payload.email, token: false,\n                  authorized: false }));\n                setTimeout(() => history.push(\"/register/confirm-email\"), 3000);\n              }\n          })\n        }\n        if (response.status >= 500) {\n          dispatch(loginError('Oops! We did something wrong.'));\n          setTimeout(() => dispatch(clearError()), 5000);\n        }\n    })\n    .catch(() => {\n      dispatch(loginError('Oops! We did something wrong.'));\n    })\n  }\n}\n\n// to send the password reset link\nexport const sendResetLink = (email, history) => {\n  return (dispatch) => {\n    dispatch(sendResetLinkRequest());\n    const payload = { email };\n\n    fetch(`${CONFIG.BASE_URL}/auth/password/forgot`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n    })\n    .then(response => {\n        if ([200, 201].includes(response.status)) {\n          response.json()\n          .then(res => {\n            dispatch(sendResetLinkSuccess( !history && res));\n            history && history.push({ pathname:\"/forgot-password-confirmation\", state:payload })\n            setTimeout(() => dispatch(clear()), 5000);\n          });\n        }\n\n        if ([400, 401, 404, 403].includes(response.status)) {\n          response.json()\n          .then(res => {\n              dispatch(sendResetLinkError(res.error ? res.error : res.message));\n          })\n        }\n        if (response.status >= 500) {\n          dispatch(sendResetLinkError('Oops! We did something wrong.'));\n        }\n    })\n    .catch(() => {\n      dispatch(sendResetLinkError('Oops! We did something wrong.'));\n    })\n  }\n}\n\nexport const resetPassword = (payload, history) => {\n  return (dispatch) => {\n    dispatch(resetPasswordRequest());\n\n    fetch(`${CONFIG.BASE_URL}/auth/password/reset`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n    })\n    .then(response => {\n        if ([200, 201].includes(response.status)) {\n          response.json()\n          .then(res => {\n            dispatch(resetPasswordSuccess(res));\n            setTimeout(() => history.push('/login'), 3000);\n          });\n        }\n\n        if ([400, 401, 404, 403].includes(response.status)) {\n          response.json()\n          .then(res => {\n              dispatch(resetPasswordError(res.error ? res.error : res.message));\n          })\n        }\n        if (response.status >= 500) {\n          dispatch(resetPasswordError('Oops! We did something wrong.'));\n          setTimeout(() => dispatch(clearError()), 5000);\n        }\n    })\n    .catch(() => {\n      dispatch(resetPasswordError('Oops! We did something wrong.'));\n      setTimeout(() => dispatch(clearError()), 5000);\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}