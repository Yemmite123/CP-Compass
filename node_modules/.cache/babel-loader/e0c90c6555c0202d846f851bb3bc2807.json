{"ast":null,"code":"var _jsxFileName = \"/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/pages/Login/NewPassword/index.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport PasswordStrengthBar from 'react-password-strength-bar';\nimport Textbox from '#/components/Textbox';\nimport { resetPassword } from \"#/store/login/actions\";\nimport actionTypes from \"#/store/login/actionTypes\";\nimport { getActionLoadingState } from \"#/store/selectors\";\nimport { validateFields, isPasswordEqual, serializeErrors } from '#/utils';\nimport AuthNav from '#/components/AuthNav';\nimport Alert from '#/components/Alert';\nimport './style.scss';\n\nclass NewPassword extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: '',\n      confirm: '',\n      errors: null,\n      passwordType: 'password',\n      conPasswordType: 'password',\n      showSignal: false\n    };\n\n    this.handleChange = event => {\n      const {\n        errors\n      } = this.state;\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      }, () => {\n        if (name === 'confirm') {\n          const error = isPasswordEqual(this.state.confirm, this.state.password);\n\n          if (!error) {\n            return this.setState({\n              errors: { ...errors,\n                confirm: null\n              }\n            });\n          }\n\n          return this.setState({\n            errors: { ...errors,\n              ...error\n            }\n          });\n        }\n      });\n\n      if (name === 'password') {\n        return this.setState({\n          showSignal: true\n        });\n      }\n    };\n\n    this.handlePasswordType = () => {\n      const {\n        passwordType\n      } = this.state;\n\n      if (passwordType === 'password') {\n        return this.setState({\n          passwordType: 'text'\n        });\n      }\n\n      return this.setState({\n        passwordType: 'password'\n      });\n    };\n\n    this.handleConPasswordType = () => {\n      const {\n        conPasswordType\n      } = this.state;\n\n      if (conPasswordType === 'password') {\n        return this.setState({\n          conPasswordType: 'text'\n        });\n      }\n\n      return this.setState({\n        conPasswordType: 'password'\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        resetPassword,\n        history\n      } = this.props;\n      const {\n        params: {\n          token\n        }\n      } = this.props.match;\n      const {\n        password\n      } = this.state;\n      this.setState({\n        errors: null\n      });\n      const data = this.state;\n      const required = ['password', 'confirm'];\n      const errors = validateFields(data, required);\n\n      if (Object.keys(errors).length > 0) {\n        return this.setState({\n          errors\n        });\n      }\n\n      const payload = {\n        password,\n        resetToken: token\n      };\n      resetPassword(payload, history);\n    };\n  }\n\n  render() {\n    const {\n      password,\n      confirm,\n      errors,\n      passwordType,\n      conPasswordType,\n      showSignal\n    } = this.state;\n    const {\n      loading,\n      data,\n      error\n    } = this.props;\n    const errorObject = serializeErrors(error);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"new-password-page text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AuthNav, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Set a new password\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Textbox, {\n      onChange: this.handleChange,\n      name: \"password\",\n      value: password,\n      label: \"Password\",\n      placeholder: \"Password\",\n      boxClasses: \"mt-3\",\n      type: passwordType,\n      iconUrl: require(\"#/assets/icons/view-password.svg\"),\n      onIconClick: this.handlePasswordType,\n      error: errors ? errors.password : errorObject && errorObject['password'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(PasswordStrengthBar, {\n      password: password,\n      className: `${showSignal ? 'd-block' : 'd-none'} mt-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Textbox, {\n      onChange: this.handleChange,\n      name: \"confirm\",\n      value: confirm,\n      label: \"Confirm Password\",\n      placeholder: \"Confirm Password\",\n      boxClasses: \"mt-3\",\n      type: conPasswordType,\n      iconUrl: require(\"#/assets/icons/view-password.svg\"),\n      onIconClick: this.handleConPasswordType,\n      error: errors && errors.confirm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-sm btn-primary w-100 mt-3\",\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, \"Create new password\", loading && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-border spinner-border-white spinner-border-sm ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 19\n      }\n    }))), data && /*#__PURE__*/React.createElement(Alert, {\n      alert: {\n        type: 'success',\n        message: data.message\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 22\n      }\n    }), error && typeof error === 'string' && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-error text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 52\n      }\n    }, error))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    auth: {\n      login: {\n        data,\n        error\n      }\n    }\n  } = state;\n  return {\n    loading: getActionLoadingState(state, actionTypes.RESET_PASSWORD_REQUEST),\n    data,\n    error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetPassword: (payload, history) => dispatch(resetPassword(payload, history))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NewPassword));","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/pages/Login/NewPassword/index.js"],"names":["React","withRouter","connect","PasswordStrengthBar","Textbox","resetPassword","actionTypes","getActionLoadingState","validateFields","isPasswordEqual","serializeErrors","AuthNav","Alert","NewPassword","Component","state","password","confirm","errors","passwordType","conPasswordType","showSignal","handleChange","event","name","value","target","setState","error","handlePasswordType","handleConPasswordType","handleSubmit","preventDefault","history","props","params","token","match","data","required","Object","keys","length","payload","resetToken","render","loading","errorObject","require","type","message","mapStateToProps","auth","login","RESET_PASSWORD_REQUEST","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom'\nimport { connect } from \"react-redux\";\nimport PasswordStrengthBar from 'react-password-strength-bar';\nimport Textbox from '#/components/Textbox';\nimport { resetPassword  } from \"#/store/login/actions\";\nimport actionTypes from \"#/store/login/actionTypes\";\nimport { getActionLoadingState } from \"#/store/selectors\";\nimport { validateFields, isPasswordEqual, serializeErrors } from '#/utils';\nimport AuthNav from '#/components/AuthNav';\nimport Alert from '#/components/Alert';\nimport './style.scss';\n\nclass NewPassword extends React.Component {\n\n  state = {\n    password: '',\n    confirm: '',\n    errors: null,\n    passwordType: 'password',\n    conPasswordType: 'password',\n    showSignal: false,\n  }\n\n\n  handleChange = (event) => {\n    const { errors } = this.state;\n\n    const { name, value } = event.target;\n    this.setState({ [name]: value }, () => {\n      if( name === 'confirm') {\n        const error = isPasswordEqual(this.state.confirm, this.state.password);\n        if(!error) {\n          return this.setState({ errors: { ...errors, confirm: null }})\n        }\n        return this.setState({ errors: { ...errors, ...error }})\n      }\n    });\n    if (name === 'password') {\n      return this.setState({ showSignal: true})\n    }\n  }\n\n  handlePasswordType = () => {\n    const { passwordType } = this.state;\n    if (passwordType === 'password') {\n      return this.setState({ passwordType: 'text'})\n    }\n    return this.setState({ passwordType: 'password'})\n  }\n\n  handleConPasswordType = () => {\n    const { conPasswordType } = this.state;\n    if (conPasswordType === 'password') {\n      return this.setState({ conPasswordType: 'text'})\n    }\n    return this.setState({ conPasswordType: 'password'})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { resetPassword, history } = this.props;\n    const { params: { token } } = this.props.match\n    const { password } = this.state;\n\n    this.setState({ errors: null });\n\n    const data = this.state;\n    const required = [ 'password', 'confirm' ];\n    const errors = validateFields(data, required)\n\n    if (Object.keys(errors).length > 0) {\n      return this.setState({ errors });\n    }\n    const payload = { password, resetToken: token }\n    resetPassword(payload, history);\n  }\n\n  render () {\n    const { password, confirm, errors, passwordType, conPasswordType, showSignal } = this.state\n    const { loading, data, error } = this.props;\n    const errorObject = serializeErrors(error);\n\n    return (\n      <div className=\"new-password-page text-center\">\n        <AuthNav />\n        <h3>Set a new password</h3>\n        <div className=\"box\">\n          <div className=\"container\">\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n              <Textbox\n                onChange={this.handleChange}\n                name=\"password\"\n                value={password}\n                label=\"Password\"\n                placeholder=\"Password\"\n                boxClasses=\"mt-3\"\n                type={passwordType}\n                iconUrl={require(\"#/assets/icons/view-password.svg\")}\n                onIconClick={this.handlePasswordType}\n                error={errors ? errors.password : (errorObject && errorObject['password'])}\n              />\n              <PasswordStrengthBar password={password} className={`${showSignal ? 'd-block' : 'd-none'} mt-2`} />\n              <Textbox\n                onChange={this.handleChange}\n                name=\"confirm\"\n                value={confirm}\n                label=\"Confirm Password\"\n                placeholder=\"Confirm Password\"\n                boxClasses=\"mt-3\"\n                type={conPasswordType}\n                iconUrl={require(\"#/assets/icons/view-password.svg\")}\n                onIconClick={this.handleConPasswordType}\n                error={errors && errors.confirm}\n              />\n              <button className=\"btn btn-sm btn-primary w-100 mt-3\" disabled={loading}>\n                Create new password\n                {loading &&\n                  <div className=\"spinner-border spinner-border-white spinner-border-sm ml-2\"></div>\n                }\n              </button>\n            </form>\n            {data && <Alert alert={{ type: 'success', message: data.message }}/>}\n            {error && typeof error === 'string' && <p className=\"text-error text-left\">{error}</p>}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { auth: { login: { data, error } } } = state;\n  return {\n    loading: getActionLoadingState(state, actionTypes.RESET_PASSWORD_REQUEST),\n    data,\n    error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    resetPassword: (payload, history) => dispatch(resetPassword(payload, history)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NewPassword));"]},"metadata":{},"sourceType":"module"}