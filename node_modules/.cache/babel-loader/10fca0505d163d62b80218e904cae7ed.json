{"ast":null,"code":"import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\nconst getDashboardInfoRequest = () => {\n  return {\n    type: actions.GET_DASHBOARD_INFO_REQUEST\n  };\n};\n\nconst getDashboardInfoError = message => {\n  return {\n    type: actions.GET_DASHBOARD_INFO_ERROR,\n    error: message\n  };\n};\n\nconst getDashboardInfoSuccess = data => {\n  return {\n    type: actions.GET_DASHBOARD_INFO_SUCCESS,\n    data\n  };\n};\n\nexport const getDashboardInfo = () => {\n  return (dispatch, getState) => {\n    dispatch(getDashboardInfoRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/users/dashboard`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getDashboardInfoSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(getDashboardInfoError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getDashboardInfoError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getDashboardInfoError('Oops! We did something wrong.'));\n    });\n  };\n};\n\nconst getRefreshTokenRequest = () => {\n  return {\n    type: actions.GET_REFRESH_TOKEN_REQUEST\n  };\n};\n\nconst getRefreshTokenError = message => {\n  return {\n    type: actions.GET_REFRESH_TOKEN_ERROR,\n    error: message\n  };\n};\n\nconst getRefreshTokenSuccess = data => {\n  return {\n    type: actions.GET_REFRESH_TOKEN_SUCCESS,\n    data\n  };\n};\n\nexport const getRefreshToken = () => {\n  return (dispatch, getState) => {\n    dispatch(getRefreshTokenRequest());\n    const {\n      token\n    } = getState().user;\n    axios.get(`${CONFIG.BASE_URL}/auth/refresh-token`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    }).then(response => {\n      response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n      dispatch(getRefreshTokenSuccess(response.data));\n    }).catch(({\n      response\n    }) => {\n      response && response.headers.authorization && dispatch(updateUser({\n        token: response.headers.authorization\n      }));\n\n      if (response && [400, 404, 422, 403].includes(response.status)) {\n        return dispatch(getRefreshTokenError(response.data.error ? response.data.error : response.data.message));\n      }\n\n      if (response && [401].includes(response.status)) {\n        dispatch(showAlert({\n          type: 'error',\n          message: 'Your session has expired'\n        }));\n        return setTimeout(() => dispatch(logout()), 2000);\n      }\n\n      if (response && response.status >= 500) {\n        return dispatch(getRefreshTokenError('Oops! We did something wrong.'));\n      }\n\n      return dispatch(getRefreshTokenError('Oops! We did something wrong.'));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/dashboard/actions.js"],"names":["axios","CONFIG","actions","logout","updateUser","showAlert","getDashboardInfoRequest","type","GET_DASHBOARD_INFO_REQUEST","getDashboardInfoError","message","GET_DASHBOARD_INFO_ERROR","error","getDashboardInfoSuccess","data","GET_DASHBOARD_INFO_SUCCESS","getDashboardInfo","dispatch","getState","token","user","get","BASE_URL","headers","Authorization","then","response","authorization","catch","includes","status","setTimeout","getRefreshTokenRequest","GET_REFRESH_TOKEN_REQUEST","getRefreshTokenError","GET_REFRESH_TOKEN_ERROR","getRefreshTokenSuccess","GET_REFRESH_TOKEN_SUCCESS","getRefreshToken"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport CONFIG from '#/config';\nimport * as actions from \"./actionTypes\";\nimport { logout, updateUser } from \"#/store/user/actions\";\nimport { showAlert } from '#/store/ui/actions';\n\n\nconst getDashboardInfoRequest = () => {\n  return {\n    type: actions.GET_DASHBOARD_INFO_REQUEST,\n  }\n}\n\nconst getDashboardInfoError = (message) => {\n  return {\n    type: actions.GET_DASHBOARD_INFO_ERROR,\n    error: message,\n  }\n}\n\nconst getDashboardInfoSuccess = (data) => {\n  return {\n    type: actions.GET_DASHBOARD_INFO_SUCCESS,\n    data,\n  }\n}\n\nexport const getDashboardInfo = () => {\n  return (dispatch, getState) => {\n    dispatch(getDashboardInfoRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/users/dashboard`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getDashboardInfoSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getDashboardInfoError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getDashboardInfoError('Oops! We did something wrong.'));\n        }\n        return dispatch(getDashboardInfoError('Oops! We did something wrong.'));\n      })\n  }\n}\n\nconst getRefreshTokenRequest = () => {\n  return {\n    type: actions.GET_REFRESH_TOKEN_REQUEST,\n  }\n}\n\nconst getRefreshTokenError = (message) => {\n  return {\n    type: actions.GET_REFRESH_TOKEN_ERROR,\n    error: message,\n  }\n}\n\nconst getRefreshTokenSuccess = (data) => {\n  return {\n    type: actions.GET_REFRESH_TOKEN_SUCCESS,\n    data,\n  }\n}\n\nexport const getRefreshToken = () => {\n  return (dispatch, getState) => {\n    dispatch(getRefreshTokenRequest());\n\n    const { token } = getState().user;\n\n    axios.get(`${CONFIG.BASE_URL}/auth/refresh-token`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token,\n      },\n    })\n      .then(response => {\n        response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        dispatch(getRefreshTokenSuccess(response.data));\n      })\n      .catch(({ response }) => {\n        response && response.headers.authorization && dispatch(updateUser({\n          token: response.headers.authorization\n        }))\n        if (response && [400, 404, 422, 403].includes(response.status)) {\n          return dispatch(getRefreshTokenError(response.data.error ? response.data.error : response.data.message));\n        }\n        if (response && [401].includes(response.status)) {\n          dispatch(showAlert({ type: 'error', message: 'Your session has expired' }))\n          return setTimeout(() => dispatch(logout()), 2000)\n        }\n        if (response && response.status >= 500) {\n          return dispatch(getRefreshTokenError('Oops! We did something wrong.'));\n        }\n        return dispatch(getRefreshTokenError('Oops! We did something wrong.'));\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}