{"ast":null,"code":"var _jsxFileName = \"/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/components/CustomInput/index.js\";\nimport React from \"react\";\nimport DatePicker from \"react-date-picker\";\nimport calendarIcon from \"#/assets/icons/calendar.svg\";\nimport { countryCodes } from \"#/utils/countryCode\";\nimport \"./style.scss\";\n\nconst CustomInput = ({\n  type,\n  label,\n  name,\n  error,\n  value,\n  countryCodeValue,\n  // for phone input\n  disabled,\n  maxDate,\n  // for date input\n  minDate,\n  // for date input\n  options,\n  // for select\n  onChange,\n  valueKey,\n  // for select\n  customAttributes // object of additional attributes you want\n\n}) => {\n  const [hasValue, setHasvalue] = React.useState(false);\n  React.useEffect(() => {\n    if (value) {\n      setHasvalue(true);\n    }\n  }, [value]);\n\n  const onInputChange = e => {\n    setHasvalue(e.target.value.trim().length > 0 ? true : false);\n    onChange(e);\n  };\n\n  const handleDateChange = date => {\n    setHasvalue(true);\n    onChange(date);\n  };\n\n  const randomId = Math.floor(Math.random() * 3271 * Math.random() * 1000);\n  const commonProps = { ...customAttributes,\n    name,\n    disabled,\n    id: randomId,\n    className: \"custom-input__input\"\n  };\n  const inputProps = { ...commonProps,\n    value,\n    onChange: onInputChange\n  };\n\n  const getSelectOptions = options => {\n    return options.map(option => {\n      var _option$value;\n\n      const name = typeof option === \"string\" ? option : option.name;\n      const value = typeof option === \"string\" ? option : (_option$value = option.value) !== null && _option$value !== void 0 ? _option$value : option[valueKey];\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        key: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, name);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `custom-input ${hasValue ? \"custom-input__filled\" : \"\"} \n        ${disabled ? \"custom-input__disabled\" : \"\"} \n        ${error ? \"custom-input__errored\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: randomId,\n    className: `custom-input__label ${hasValue ? \"custom-input__label--top\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, label), type === \"date\" ? /*#__PURE__*/React.createElement(DatePicker, Object.assign({\n    calendarIcon: /*#__PURE__*/React.createElement(\"img\", {\n      src: calendarIcon,\n      alt: \"calendar icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }),\n    onChange: handleDateChange,\n    value: value,\n    format: \"dd/MM/yyyy\",\n    clearIcon: null,\n    maxDate: maxDate !== null && maxDate !== void 0 ? maxDate : null,\n    minDate: minDate !== null && minDate !== void 0 ? minDate : null\n  }, commonProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })) : type === \"select\" ? /*#__PURE__*/React.createElement(\"select\", Object.assign({}, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"...select...\"), getSelectOptions(options)) : type === \"phone\" ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-input__phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    name: \"countryCode\",\n    value: countryCodeValue,\n    onChange: onInputChange,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, countryCodes.map(code => /*#__PURE__*/React.createElement(\"option\", {\n    value: code.dial_code,\n    key: code.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, code.dial_code, \" \", code.name))), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }))) : /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), error && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"custom-input__error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, error));\n};\n\nexport default CustomInput;","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/components/CustomInput/index.js"],"names":["React","DatePicker","countryCodes","CustomInput","type","label","name","error","value","countryCodeValue","disabled","maxDate","minDate","options","onChange","valueKey","customAttributes","hasValue","setHasvalue","useState","useEffect","onInputChange","e","target","trim","length","handleDateChange","date","randomId","Math","floor","random","commonProps","id","className","inputProps","getSelectOptions","map","option","calendarIcon","code","dial_code"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-date-picker\";\nimport calendarIcon from \"#/assets/icons/calendar.svg\";\nimport { countryCodes } from \"#/utils/countryCode\";\n\nimport \"./style.scss\";\n\nconst CustomInput = ({\n  type,\n  label,\n  name,\n  error,\n  value,\n  countryCodeValue, // for phone input\n  disabled,\n  maxDate, // for date input\n  minDate, // for date input\n  options, // for select\n  onChange,\n  valueKey, // for select\n  customAttributes, // object of additional attributes you want\n}) => {\n  const [hasValue, setHasvalue] = React.useState(false);\n\n  React.useEffect(() => {\n    if (value) {\n      setHasvalue(true);\n    }\n  }, [value]);\n\n  const onInputChange = (e) => {\n    setHasvalue(e.target.value.trim().length > 0 ? true : false);\n    onChange(e);\n  };\n\n  const handleDateChange = (date) => {\n    setHasvalue(true);\n    onChange(date);\n  };\n\n  const randomId = Math.floor(Math.random() * 3271 * Math.random() * 1000);\n\n  const commonProps = {\n    ...customAttributes,\n    name,\n    disabled,\n    id: randomId,\n    className: \"custom-input__input\",\n  };\n\n  const inputProps = {\n    ...commonProps,\n    value,\n    onChange: onInputChange,\n  };\n\n  const getSelectOptions = (options) => {\n    return options.map((option) => {\n      const name = typeof option === \"string\" ? option : option.name;\n      const value =\n        typeof option === \"string\" ? option : option.value ?? option[valueKey];\n      return (\n        <option value={value} key={value}>\n          {name}\n        </option>\n      );\n    });\n  };\n\n  return (\n    <div\n      className={`custom-input ${hasValue ? \"custom-input__filled\" : \"\"} \n        ${disabled ? \"custom-input__disabled\" : \"\"} \n        ${error ? \"custom-input__errored\" : \"\"}`}\n    >\n      <label\n        htmlFor={randomId}\n        className={`custom-input__label ${\n          hasValue ? \"custom-input__label--top\" : \"\"\n        }`}\n      >\n        {label}\n      </label>\n      {type === \"date\" ? (\n        <DatePicker\n          calendarIcon={<img src={calendarIcon} alt=\"calendar icon\" />}\n          onChange={handleDateChange}\n          value={value}\n          format=\"dd/MM/yyyy\"\n          clearIcon={null}\n          maxDate={maxDate ?? null}\n          minDate={minDate ?? null}\n          {...commonProps}\n        />\n      ) : type === \"select\" ? (\n        <select {...inputProps}>\n          <option value=\"\">...select...</option>\n          {getSelectOptions(options)}\n        </select>\n      ) : type === \"phone\" ? (\n        <div className=\"custom-input__phone\">\n          <select\n            name=\"countryCode\"\n            value={countryCodeValue}\n            onChange={onInputChange}\n            disabled={disabled}\n          >\n            {countryCodes.map((code) => (\n              <option value={code.dial_code} key={code.name}>\n                {code.dial_code} {code.name}\n              </option>\n            ))}\n          </select>\n          <input {...inputProps} type=\"number\" />\n        </div>\n      ) : (\n        <input {...inputProps} type={type} />\n      )}\n      {error && <span className=\"custom-input__error\">{error}</span>}\n    </div>\n  );\n};\n\nexport default CustomInput;\n"]},"metadata":{},"sourceType":"module"}