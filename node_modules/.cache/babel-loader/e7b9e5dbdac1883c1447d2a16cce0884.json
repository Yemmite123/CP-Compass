{"ast":null,"code":"var _jsxFileName = \"/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/pages/App/Profile/Security/index.js\";\nimport React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Alert from '#/components/Alert';\nimport CustomInput from \"#/components/CustomInput\";\nimport { getActionLoadingState } from \"#/store/selectors\";\nimport { updatePin } from \"#/store/profile/actions\";\nimport actionTypes from \"#/store/profile/actionTypes\";\nimport { changePassword } from \"#/store/security/actions\";\nimport passActionTypes from \"#/store/security/actionTypes\";\nimport { isPasswordEqual, serializeErrors, validateFields } from '#/utils';\nimport './style.scss';\n\nclass Security extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      errors: null,\n      oldPasswordType: 'password',\n      passwordType: 'password',\n      conPasswordType: 'password',\n      pin: '',\n      confirmPin: '',\n      pinValidate: null,\n      userPass: '',\n      userPasswordType: 'password',\n      showPasswordModal: false,\n      showSignal: false\n    };\n    this.pinForm = React.createRef();\n\n    this.handlePasswordType = () => {\n      const {\n        passwordType\n      } = this.state;\n\n      if (passwordType === 'password') {\n        return this.setState({\n          passwordType: 'text'\n        });\n      }\n\n      return this.setState({\n        passwordType: 'password'\n      });\n    };\n\n    this.handleOldPasswordType = () => {\n      const {\n        oldPasswordType\n      } = this.state;\n\n      if (oldPasswordType === 'password') {\n        return this.setState({\n          oldPasswordType: 'text'\n        });\n      }\n\n      return this.setState({\n        oldPasswordType: 'password'\n      });\n    };\n\n    this.handleConPasswordType = () => {\n      const {\n        conPasswordType\n      } = this.state;\n\n      if (conPasswordType === 'password') {\n        return this.setState({\n          conPasswordType: 'text'\n        });\n      }\n\n      return this.setState({\n        conPasswordType: 'password'\n      });\n    };\n\n    this.handleUserPasswordType = () => {\n      const {\n        userPasswordType\n      } = this.state;\n\n      if (userPasswordType === 'password') {\n        return this.setState({\n          userPasswordType: 'text'\n        });\n      }\n\n      return this.setState({\n        userPasswordType: 'password'\n      });\n    };\n\n    this.handleChange = event => {\n      const {\n        errors\n      } = this.state;\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      }, () => {\n        if (name === 'confirmPassword') {\n          const error = isPasswordEqual(this.state.confirmPassword, this.state.newPassword);\n\n          if (!error) {\n            return this.setState({\n              errors: { ...errors,\n                confirm: null\n              }\n            });\n          }\n\n          return this.setState({\n            errors: { ...errors,\n              ...error\n            }\n          });\n        }\n      });\n\n      if (name === 'newPassword') {\n        return this.setState({\n          showSignal: true\n        });\n      }\n    };\n\n    this.togglePasswordModal = () => {\n      this.setState({\n        showPasswordModal: !this.state.showPasswordModal,\n        userPass: ''\n      });\n    };\n\n    this.handlePin = pin => {\n      this.setState({\n        pin\n      });\n    };\n\n    this.handleConPin = pin => {\n      this.setState({\n        confirmPin: pin\n      });\n    };\n\n    this.handleSubmitPin = e => {\n      e.preventDefault();\n      const {\n        updatePin\n      } = this.props;\n      this.setState({\n        errors: null,\n        pinValidate: ''\n      });\n      const {\n        userPass,\n        confirmPin,\n        pin\n      } = this.state;\n\n      if (pin.length < 4 || confirmPin.length < 4) {\n        return this.setState({\n          pinValidate: 'pin must be up to 4 characters'\n        });\n      }\n\n      if (pin !== confirmPin) {\n        return this.setState({\n          pinValidate: 'PINs do not match'\n        });\n      }\n\n      const data = this.state;\n      const required = ['userPass'];\n      const errors = validateFields(data, required);\n\n      if (Object.keys(errors).length > 0) {\n        return this.setState({\n          errors\n        });\n      }\n\n      updatePin({\n        confirmPin,\n        pin,\n        password: userPass\n      }).then(() => {\n        this.setState(prevState => ({\n          userPass: '',\n          confirmPin: '',\n          pin: ''\n        }));\n      }).catch(() => {\n        this.setState(prevState => ({\n          userPass: '',\n          confirmPin: '',\n          pin: ''\n        }));\n      });\n    };\n\n    this.resetForm = e => {\n      e.preventDefault();\n      console.log(this.pinForm.current);\n      this.pinForm.current.reset();\n    };\n\n    this.handleSubmitPassword = e => {\n      e.preventDefault();\n      const {\n        changePassword\n      } = this.props;\n      this.setState({\n        errors: null\n      });\n      const {\n        currentPassword,\n        newPassword,\n        confirmPassword\n      } = this.state;\n      const data = this.state;\n      const required = ['currentPassword', 'newPassword', 'confirmPassword'];\n      const errors = validateFields(data, required);\n\n      if (Object.keys(errors).length > 0) {\n        return this.setState({\n          errors\n        });\n      }\n\n      changePassword({\n        currentPassword,\n        password: newPassword,\n        confirmPassword\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      return this.setState({\n        pin: '',\n        confirmPin: '',\n        showPasswordModal: false,\n        userPass: ''\n      });\n    }\n\n    if (this.props.securityData !== prevProps.securityData) {\n      return this.setState({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      currentPassword,\n      newPassword,\n      confirmPassword,\n      errors,\n      pinValidate,\n      userPass,\n      confirmPin,\n      pin\n    } = this.state;\n    const {\n      pinLoading,\n      error,\n      pinError,\n      data,\n      passLoading,\n      securityData\n    } = this.props;\n    const errorObject = serializeErrors(error);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"section-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"section-header mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, \"Change Password\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"section-form mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      name: \"currentPassword\",\n      label: \"Current Password\",\n      value: currentPassword,\n      type: \"password\",\n      onChange: this.handleChange,\n      error: errors ? errors.currentPassword : errorObject && errorObject['currentPassword'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CustomInput, {\n      name: \"newPassword\",\n      label: \"New Password\",\n      value: newPassword,\n      type: \"password\",\n      onChange: this.handleChange,\n      error: errors ? errors.newPassword : errorObject && errorObject['password'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CustomInput, {\n      name: \"confirmPassword\",\n      label: \"Confirm Password\",\n      value: confirmPassword,\n      type: \"password\",\n      onChange: this.handleChange,\n      error: errors ? errors.confirmPassword : errorObject && errorObject['confirmPassword'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"section-form__button-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, error && typeof error === 'string' && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-error mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 54\n      }\n    }, error), securityData && /*#__PURE__*/React.createElement(Alert, {\n      alert: {\n        type: \"success\",\n        message: securityData.message\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 32\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn-default\",\n      disabled: passLoading,\n      onClick: this.handleSubmitPassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    }, \"Save changes\", passLoading && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-border spinner-border-white spinner-border-sm ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"section-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"section-header mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }\n    }, \"Change Trasaction Pin\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"section-form mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      name: \"userPass\",\n      label: \"Your Password\",\n      value: userPass,\n      type: \"password\",\n      onChange: this.handleChange,\n      error: errors ? errors.userPass : errorObject && errorObject['userPass'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CustomInput, {\n      name: \"pin\",\n      label: \"New Transaction Pin\",\n      value: pin,\n      type: \"password\",\n      onChange: this.handleChange,\n      customAttributes: {\n        maxLength: \"4\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CustomInput, {\n      name: \"confirmPin\",\n      label: \"Confirm New Transaction Pin\",\n      value: confirmPin,\n      type: \"password\",\n      onChange: this.handleChange,\n      customAttributes: {\n        maxLength: \"4\"\n      },\n      error: pinValidate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"section-form__button-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }, data && /*#__PURE__*/React.createElement(Alert, {\n      alert: {\n        type: \"success\",\n        message: data.message\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 24\n      }\n    }), pinError && typeof pinError === 'string' && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-error text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 60\n      }\n    }, pinError), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn-default\",\n      disabled: pinLoading,\n      onClick: this.handleSubmitPin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 15\n      }\n    }, \"Save changes\", pinLoading && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-border spinner-border-white spinner-border-sm ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 19\n      }\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    app: {\n      profile: {\n        security: {\n          data,\n          pinError\n        }\n      },\n      security: {\n        error,\n        data: securityData\n      }\n    }\n  } = state;\n  return {\n    pinLoading: getActionLoadingState(state, actionTypes.UPDATE_PIN_REQUEST),\n    passLoading: getActionLoadingState(state, passActionTypes.CHANGE_PASSWORD_REQUEST),\n    pinError,\n    data,\n    error,\n    securityData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updatePin: payload => dispatch(updatePin(payload)),\n    changePassword: payload => dispatch(changePassword(payload))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Security));","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/pages/App/Profile/Security/index.js"],"names":["React","withRouter","connect","Alert","CustomInput","getActionLoadingState","updatePin","actionTypes","changePassword","passActionTypes","isPasswordEqual","serializeErrors","validateFields","Security","Component","state","currentPassword","newPassword","confirmPassword","errors","oldPasswordType","passwordType","conPasswordType","pin","confirmPin","pinValidate","userPass","userPasswordType","showPasswordModal","showSignal","pinForm","createRef","handlePasswordType","setState","handleOldPasswordType","handleConPasswordType","handleUserPasswordType","handleChange","event","name","value","target","error","confirm","togglePasswordModal","handlePin","handleConPin","handleSubmitPin","e","preventDefault","props","length","data","required","Object","keys","password","then","prevState","catch","resetForm","console","log","current","reset","handleSubmitPassword","componentDidUpdate","prevProps","securityData","render","pinLoading","pinError","passLoading","errorObject","type","message","maxLength","mapStateToProps","app","profile","security","UPDATE_PIN_REQUEST","CHANGE_PASSWORD_REQUEST","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Alert from '#/components/Alert';\nimport CustomInput from \"#/components/CustomInput\";\nimport { getActionLoadingState } from \"#/store/selectors\";\nimport { updatePin  } from \"#/store/profile/actions\";\nimport actionTypes from \"#/store/profile/actionTypes\";\nimport { changePassword  } from \"#/store/security/actions\";\nimport passActionTypes from \"#/store/security/actionTypes\";\nimport { isPasswordEqual, serializeErrors, validateFields } from '#/utils';\nimport './style.scss';\n\nclass Security extends React.Component {\n\n  state = {\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n    errors: null,\n    oldPasswordType: 'password',\n    passwordType: 'password',\n    conPasswordType: 'password',\n    pin: '',\n    confirmPin: '',\n    pinValidate: null,\n    userPass: '',\n    userPasswordType: 'password',\n    showPasswordModal: false,\n    showSignal: false,\n  };\n\n  pinForm = React.createRef();\n\n  componentDidUpdate(prevProps) {\n    if(this.props.data !== prevProps.data) {\n      return this.setState({\n        pin: '',\n        confirmPin: '',\n        showPasswordModal: false,\n        userPass: '',\n      })\n    }\n    if(this.props.securityData !== prevProps.securityData) {\n      return this.setState({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n      })\n    }\n  }\n\n  handlePasswordType = () => {\n    const { passwordType } = this.state;\n    if (passwordType === 'password') {\n      return this.setState({ passwordType: 'text'})\n    }\n    return this.setState({ passwordType: 'password'})\n  }\n\n  handleOldPasswordType = () => {\n    const { oldPasswordType } = this.state;\n    if (oldPasswordType === 'password') {\n      return this.setState({ oldPasswordType: 'text'})\n    }\n    return this.setState({ oldPasswordType: 'password'})\n  }\n\n  handleConPasswordType = () => {\n    const { conPasswordType } = this.state;\n    if (conPasswordType === 'password') {\n      return this.setState({ conPasswordType: 'text'})\n    }\n    return this.setState({ conPasswordType: 'password'})\n  }\n\n  handleUserPasswordType = () => {\n    const { userPasswordType } = this.state;\n    if (userPasswordType === 'password') {\n      return this.setState({ userPasswordType: 'text'})\n    }\n    return this.setState({ userPasswordType: 'password'})\n  }\n\n  handleChange = (event) => {\n    const { errors } = this.state\n    const { name, value } = event.target\n\n    this.setState({ [name]: value }, () => {\n      if( name === 'confirmPassword') {\n        const error = isPasswordEqual(this.state.confirmPassword, this.state.newPassword);\n        if(!error) {\n          return this.setState({ errors: { ...errors, confirm: null }})\n        }\n        return this.setState({ errors: { ...errors, ...error }})\n      }\n    });\n\n    if (name === 'newPassword') {\n      return this.setState({ showSignal: true})\n    }\n  }\n\n  togglePasswordModal = () => {\n    this.setState({ showPasswordModal: !this.state.showPasswordModal, userPass: '' })\n  }\n\n  handlePin = (pin) => {\n    this.setState({pin})\n  }\n\n  handleConPin = (pin) => {\n    this.setState({confirmPin: pin})\n  }\n\n  handleSubmitPin = (e) => {\n    e.preventDefault();\n\n    const { updatePin } = this.props;\n    this.setState({ errors: null, pinValidate: '' });\n    const { userPass, confirmPin, pin } = this.state;\n\n    if (pin.length < 4 || confirmPin.length < 4) {\n      return this.setState({ pinValidate: 'pin must be up to 4 characters'})\n    }\n    if ( pin !== confirmPin) {\n      return this.setState({ pinValidate: 'PINs do not match'})\n    }\n\n    const data = this.state;\n    const required = [ 'userPass' ];\n    const errors = validateFields(data, required)\n\n    if (Object.keys(errors).length > 0) {\n      return this.setState({ errors });\n    }\n    \n    updatePin({ confirmPin, pin, password: userPass }).then(() => {\n      this.setState(prevState => ({ userPass: '', confirmPin: '', pin: '' }))\n    }).catch(() => {\n      this.setState(prevState => ({ userPass: '', confirmPin: '', pin: '' }))\n    });\n\n  }\n\n  resetForm = (e) => {\n    e.preventDefault()\n    console.log(this.pinForm.current)\n    this.pinForm.current.reset();\n\n  }\n\n  handleSubmitPassword = (e) => {\n    e.preventDefault();\n\n    const { changePassword } = this.props;\n    this.setState({ errors: null });\n    const { currentPassword, newPassword, confirmPassword } = this.state;\n\n    const data = this.state;\n    const required = [ 'currentPassword', 'newPassword', 'confirmPassword' ];\n    const errors = validateFields(data, required)\n\n    if (Object.keys(errors).length > 0) {\n      return this.setState({ errors });\n    }\n\n    changePassword({ currentPassword, password: newPassword, confirmPassword })\n  }\n\n  render() {\n    const { \n      currentPassword, newPassword, confirmPassword, errors, pinValidate, userPass,\n      confirmPin, pin\n    } = this.state;\n    const { pinLoading, error, pinError, data, passLoading, securityData } = this.props;\n    const errorObject = serializeErrors(error);\n\n    return (\n      <div className=\"mb-5\">\n        <div className=\"section-container\">\n          <h2 className=\"section-header mb-3\">Change Password</h2>\n          <div className=\"section-form mt-4\">\n            <CustomInput\n              name=\"currentPassword\"\n              label=\"Current Password\"\n              value={currentPassword}\n              type=\"password\"\n              onChange={this.handleChange}\n              error={errors ? errors.currentPassword : (errorObject && errorObject['currentPassword'])}\n            />\n            <CustomInput\n              name=\"newPassword\"\n              label=\"New Password\"\n              value={newPassword}\n              type=\"password\"\n              onChange={this.handleChange}\n              error={errors ? errors.newPassword : (errorObject && errorObject['password'])}\n            />\n            <CustomInput\n              name=\"confirmPassword\"\n              label=\"Confirm Password\"\n              value={confirmPassword}\n              type=\"password\"\n              onChange={this.handleChange}\n              error={errors ? errors.confirmPassword : (errorObject && errorObject['confirmPassword'])}\n            />\n            <div className=\"section-form__button-area\">\n              {error && typeof error === 'string' && <p className=\"text-error mt-2\">{error}</p>}\n              {securityData && <Alert alert={{ type:\"success\", message: securityData.message}}/>}\n              <button className=\"btn-default\" disabled={passLoading} onClick={this.handleSubmitPassword}>\n                Save changes\n                {passLoading && (\n                  <div className=\"spinner-border spinner-border-white spinner-border-sm ml-2\"></div>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"section-container\">\n          <h2 className=\"section-header mb-3\">Change Trasaction Pin</h2>\n          <div className=\"section-form mt-4\">\n            <CustomInput\n              name=\"userPass\"\n              label=\"Your Password\"\n              value={userPass}\n              type=\"password\"\n              onChange={this.handleChange}\n              error={errors ? errors.userPass : (errorObject && errorObject['userPass'])}\n            />\n            <CustomInput\n              name=\"pin\"\n              label=\"New Transaction Pin\"\n              value={pin}\n              type=\"password\"\n              onChange={this.handleChange}\n              customAttributes={{maxLength: \"4\"}}\n            />\n            <CustomInput\n              name=\"confirmPin\"\n              label=\"Confirm New Transaction Pin\"\n              value={confirmPin}\n              type=\"password\"\n              onChange={this.handleChange}\n              customAttributes={{maxLength: \"4\"}}\n              error={pinValidate}\n            />\n            <div className=\"section-form__button-area\">\n              {data && <Alert alert={{ type:\"success\", message: data.message}}/>}\n              {pinError && typeof pinError === 'string' && <p className=\"text-error text-left\">{pinError}</p>}\n              <button className=\"btn-default\" disabled={pinLoading} onClick={this.handleSubmitPin}>\n                Save changes\n                {pinLoading && (\n                  <div className=\"spinner-border spinner-border-white spinner-border-sm ml-2\"></div>\n                )}\n              </button>\n            </div>\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { \n    app: { \n      profile: { security: { data, pinError } },\n      security: { error, data: securityData }\n    } \n  } = state;\n  return {\n    pinLoading: getActionLoadingState(state, actionTypes.UPDATE_PIN_REQUEST),\n    passLoading: getActionLoadingState(state, passActionTypes.CHANGE_PASSWORD_REQUEST),\n    pinError,\n    data,\n    error,\n    securityData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updatePin: (payload) => dispatch(updatePin(payload)),\n    changePassword: (payload) => dispatch(changePassword(payload)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Security));\n"]},"metadata":{},"sourceType":"module"}