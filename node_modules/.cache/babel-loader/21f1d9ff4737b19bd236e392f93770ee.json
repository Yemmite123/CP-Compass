{"ast":null,"code":"import * as actions from './actionTypes';\nconst notificationsDefaultState = {\n  data: null,\n  error: false,\n  notifications: {},\n  meta: null\n};\nexport default ((state = notificationsDefaultState, action) => {\n  var _action$data$data;\n\n  switch (action.type) {\n    case actions.GET_ALL_NOTIFICATIONS_SUCCESS:\n      return { ...state,\n        error: false,\n        data: action.data,\n        meta: action.data.data,\n        notifications: (_action$data$data = action.data.data) === null || _action$data$data === void 0 ? void 0 : _action$data$data.notifications\n      };\n\n    case actions.GET_ALL_NOTIFICATIONS_ERROR:\n      return { ...state,\n        error: action.error\n      };\n\n    case actions.UPDATE_NOTIFICATION_SUCCESS:\n      return { ...state,\n        error: false,\n        data: action.data\n      };\n\n    case actions.UPDATE_NOTIFICATION_ERROR:\n      return { ...state,\n        error: action.error\n      };\n\n    case actions.DELETE_NOTIFICATION_SUCCESS:\n      return { ...state,\n        error: false,\n        data: action.data.data\n      };\n\n    case actions.DELETE_NOTIFICATION_ERROR:\n      return { ...state,\n        error: action.error\n      };\n\n    case actions.ADD_NEW_NOTIFICATION_SUCCESS:\n      return { ...state,\n        error: false,\n        data: action.data,\n        meta: action.data.data,\n        notifications: Object.keys(state.notifications).includes(Object.keys(action.data)[0]) ? {\n          [Object.keys(action.data)[0]]: [action.data[Object.keys(action.data)[0]], ...state.notifications[Object.keys(action.data)[0]]]\n        } : {\n          [Object.keys(action.data)[0]]: [action.data[Object.keys(action.data)[0]]],\n          ...state.notifications\n        }\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/adebayooluyemi/Documents/THE BULB/cpinvest-app/cpinvest-app/src/store/notifications/index.js"],"names":["actions","notificationsDefaultState","data","error","notifications","meta","state","action","type","GET_ALL_NOTIFICATIONS_SUCCESS","GET_ALL_NOTIFICATIONS_ERROR","UPDATE_NOTIFICATION_SUCCESS","UPDATE_NOTIFICATION_ERROR","DELETE_NOTIFICATION_SUCCESS","DELETE_NOTIFICATION_ERROR","ADD_NEW_NOTIFICATION_SUCCESS","Object","keys","includes"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,eAAzB;AAEA,MAAMC,yBAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAE,IAD0B;AAEhCC,EAAAA,KAAK,EAAE,KAFyB;AAGhCC,EAAAA,aAAa,EAAE,EAHiB;AAIhCC,EAAAA,IAAI,EAAE;AAJ0B,CAAlC;AAOA,gBAAe,CAACC,KAAK,GAAGL,yBAAT,EAAoCM,MAApC,KAA+C;AAAA;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,OAAO,CAACS,6BAAb;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYH,QAAAA,KAAK,EAAE,KAAnB;AACLD,QAAAA,IAAI,EAAEK,MAAM,CAACL,IADR;AACcG,QAAAA,IAAI,EAAEE,MAAM,CAACL,IAAP,CAAYA,IADhC;AAELE,QAAAA,aAAa,uBAAEG,MAAM,CAACL,IAAP,CAAYA,IAAd,sDAAE,kBAAkBE;AAF5B,OAAP;;AAIF,SAAKJ,OAAO,CAACU,2BAAb;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAA1B,OAAP;;AACF,SAAKH,OAAO,CAACW,2BAAb;AACE,aAAO,EAAE,GAAGL,KAAL;AAAYH,QAAAA,KAAK,EAAE,KAAnB;AAA0BD,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAAvC,OAAP;;AACF,SAAKF,OAAO,CAACY,yBAAb;AACE,aAAO,EAAE,GAAGN,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAA1B,OAAP;;AACF,SAAKH,OAAO,CAACa,2BAAb;AACE,aAAO,EAAE,GAAGP,KAAL;AAAYH,QAAAA,KAAK,EAAE,KAAnB;AAA0BD,QAAAA,IAAI,EAAEK,MAAM,CAACL,IAAP,CAAYA;AAA5C,OAAP;;AACF,SAAKF,OAAO,CAACc,yBAAb;AACE,aAAO,EAAE,GAAGR,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAA1B,OAAP;;AACA,SAAKH,OAAO,CAACe,4BAAb;AACE,aAAO,EAAE,GAAGT,KAAL;AAAYH,QAAAA,KAAK,EAAE,KAAnB;AACLD,QAAAA,IAAI,EAAEK,MAAM,CAACL,IADR;AACcG,QAAAA,IAAI,EAAEE,MAAM,CAACL,IAAP,CAAYA,IADhC;AAELE,QAAAA,aAAa,EACbY,MAAM,CAACC,IAAP,CAAYX,KAAK,CAACF,aAAlB,EAAiCc,QAAjC,CAA0CF,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACL,IAAnB,EAAyB,CAAzB,CAA1C,IACA;AAAE,WAACc,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACL,IAAnB,EAAyB,CAAzB,CAAD,GAA+B,CAAEK,MAAM,CAACL,IAAP,CAAYc,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACL,IAAnB,EAAyB,CAAzB,CAAZ,CAAF,EAA4C,GAAGI,KAAK,CAACF,aAAN,CAAoBY,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACL,IAAnB,EAAyB,CAAzB,CAApB,CAA/C;AAAjC,SADA,GAEE;AAAE,WAACc,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACL,IAAnB,EAAyB,CAAzB,CAAD,GAA+B,CAACK,MAAM,CAACL,IAAP,CAAYc,MAAM,CAACC,IAAP,CAAYV,MAAM,CAACL,IAAnB,EAAyB,CAAzB,CAAZ,CAAD,CAAjC;AAA6E,aAAGI,KAAK,CAACF;AAAtF;AALG,OAAP;;AAOJ;AACE,aAAOE,KAAP;AAzBJ;AA2BD,CA5BD","sourcesContent":["import * as actions from './actionTypes';\n\nconst notificationsDefaultState = {\n  data: null,\n  error: false,\n  notifications: {},\n  meta: null,\n}\n\nexport default (state = notificationsDefaultState, action) => {\n  switch (action.type) {\n    case actions.GET_ALL_NOTIFICATIONS_SUCCESS:\n      return { ...state, error: false,\n        data: action.data, meta: action.data.data, \n        notifications: action.data.data?.notifications\n      }\n    case actions.GET_ALL_NOTIFICATIONS_ERROR:\n      return { ...state, error: action.error }\n    case actions.UPDATE_NOTIFICATION_SUCCESS:\n      return { ...state, error: false, data: action.data }\n    case actions.UPDATE_NOTIFICATION_ERROR:\n      return { ...state, error: action.error }\n    case actions.DELETE_NOTIFICATION_SUCCESS:\n      return { ...state, error: false, data: action.data.data }\n    case actions.DELETE_NOTIFICATION_ERROR:\n      return { ...state, error: action.error }\n      case actions.ADD_NEW_NOTIFICATION_SUCCESS:\n        return { ...state, error: false,\n          data: action.data, meta: action.data.data, \n          notifications:\n          Object.keys(state.notifications).includes(Object.keys(action.data)[0]) ?\n          { [Object.keys(action.data)[0]]: [ action.data[Object.keys(action.data)[0]], ...state.notifications[Object.keys(action.data)[0]]  ] }\n          : { [Object.keys(action.data)[0]]: [action.data[Object.keys(action.data)[0]]], ...state.notifications  }\n        }\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}